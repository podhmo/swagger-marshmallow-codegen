# this is auto-generated by swagger-marshmallow-codegen
from __future__ import annotations
from marshmallow import (
    Schema,
    fields,
)
from marshmallow.validate import (
    OneOf,
    Length,
)
from swagger_marshmallow_codegen.schema import (
    AdditionalPropertiesSchema,
    PrimitiveValueSchema,
)


class Asset(Schema):
    content_type = fields.String()
    created_at = fields.String()
    download_count = fields.Number()
    id = fields.Number()
    label = fields.String()
    name = fields.String()
    size = fields.Number()
    state = fields.String()
    updated_at = fields.String()
    uploader = fields.Nested(lambda: AssetUploader())
    url = fields.String()


class AssetUploader(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Number()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class AssetPatch(Schema):
    label = fields.String()
    name = fields.String(required=True)


class AssetsItem(Schema):
    content_type = fields.String()
    created_at = fields.String()
    download_count = fields.Number()
    id = fields.Number()
    label = fields.String()
    name = fields.String()
    size = fields.Number()
    state = fields.String()
    updated_at = fields.String()
    uploader = fields.Nested(lambda: AssetsItemUploader())
    url = fields.String()


class AssetsItemUploader(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Number()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class AssigneesItem(Schema):
    avatar_url = fields.Integer()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Blob(Schema):
    content = fields.String()
    encoding = fields.String(validate=[OneOf(choices=['utf-8', 'base64'], labels=[])])
    sha = fields.String()
    size = fields.Integer()


class Blobs(Schema):
    sha = fields.String()


class Branch(Schema):
    _links = fields.Nested(lambda: Branch_links())
    commit = fields.Nested(lambda: BranchCommit())
    name = fields.String()


class BranchCommit(Schema):
    author = fields.Nested(lambda: BranchCommitAuthor())
    commit = fields.Nested(lambda: BranchCommitCommit())
    committer = fields.Nested(lambda: BranchCommitCommitter())
    parents = fields.List(fields.Nested(lambda: BranchCommitParentsItem()))
    sha = fields.String()
    url = fields.String()


class BranchCommitParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class BranchCommitCommitter(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class BranchCommitCommit(Schema):
    author = fields.Nested(lambda: BranchCommitCommitAuthor())
    committer = fields.Nested(lambda: BranchCommitCommitCommitter())
    message = fields.String()
    tree = fields.Nested(lambda: BranchCommitCommitTree())
    url = fields.String()


class BranchCommitCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class BranchCommitCommitCommitter(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class BranchCommitCommitAuthor(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class BranchCommitAuthor(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Branch_links(Schema):
    html = fields.String()
    self = fields.String()


class BranchesItem(Schema):
    commit = fields.Nested(lambda: BranchesItemCommit())
    name = fields.String()


class BranchesItemCommit(Schema):
    sha = fields.String()
    url = fields.String()


class CollaboratorsItem(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Comment(Schema):
    body = fields.String()


class CommentBody(Schema):
    body = fields.String(required=True)


class CommentsItem(Schema):
    body = fields.String()
    created_at = fields.String(description='ISO 8601.')
    id = fields.Integer()
    url = fields.String()
    user = fields.Nested(lambda: CommentsItemUser())


class CommentsItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Commit(Schema):
    author = fields.Nested(lambda: CommitAuthor())
    commit = fields.Nested(lambda: CommitCommit())
    committer = fields.Nested(lambda: CommitCommitter())
    files = fields.List(fields.Nested(lambda: CommitFilesItem()))
    parents = fields.List(fields.Nested(lambda: CommitParentsItem()))
    sha = fields.String()
    stats = fields.Nested(lambda: CommitStats())
    url = fields.String()


class CommitStats(Schema):
    additions = fields.Integer()
    deletions = fields.Integer()
    total = fields.Integer()


class CommitParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class CommitFilesItem(Schema):
    additions = fields.Integer()
    blob_url = fields.String()
    changes = fields.Integer()
    deletions = fields.Integer()
    filename = fields.String()
    patch = fields.String()
    raw_url = fields.String()
    status = fields.String()


class CommitCommitter(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class CommitCommit(Schema):
    author = fields.Nested(lambda: CommitCommitAuthor())
    committer = fields.Nested(lambda: CommitCommitCommitter())
    message = fields.String()
    tree = fields.Nested(lambda: CommitCommitTree())
    url = fields.String()


class CommitCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class CommitCommitCommitter(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class CommitCommitAuthor(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class CommitAuthor(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class CommitActivityStatsItem(Schema):
    days = fields.List(fields.Integer())
    total = fields.Integer()
    week = fields.Integer()


class CommitBody(Schema):
    body = fields.String(required=True)
    line = fields.String(description='Deprecated - Use position parameter instead.')
    number = fields.String(description='Line number in the file to comment on. Defaults to null.')
    path = fields.String(description='Relative path of the file to comment on.')
    position = fields.Integer(description='Line index in the diff to comment on.')
    sha = fields.String(required=True, description='SHA of the commit to comment on.')


class CommitComments(Schema):
    body = fields.String()
    commit_id = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    html_url = fields.String()
    id = fields.Integer()
    line = fields.Integer()
    path = fields.String()
    position = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: CommitCommentsUser())


class CommitCommentsUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class CommitsItem(Schema):
    author = fields.Nested(lambda: CommitsItemAuthor())
    commit = fields.Nested(lambda: CommitsItemCommit())
    committer = fields.Nested(lambda: CommitsItemCommitter())
    parents = fields.List(fields.Nested(lambda: CommitsItemParentsItem()))
    sha = fields.String()
    url = fields.String()


class CommitsItemParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class CommitsItemCommitter(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class CommitsItemCommit(Schema):
    author = fields.Nested(lambda: CommitsItemCommitAuthor())
    committer = fields.Nested(lambda: CommitsItemCommitCommitter())
    message = fields.String()
    tree = fields.Nested(lambda: CommitsItemCommitTree())
    url = fields.String()


class CommitsItemCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class CommitsItemCommitCommitter(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class CommitsItemCommitAuthor(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class CommitsItemAuthor(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Compare_commits(Schema):
    ahead_by = fields.Integer()
    base_commit = fields.Nested(lambda: Compare_commitsBase_commit())
    behind_by = fields.Integer()
    commits = fields.List(fields.Nested(lambda: Compare_commitsCommitsItem()))
    diff_url = fields.String()
    files = fields.List(fields.Nested(lambda: Compare_commitsFilesItem()))
    html_url = fields.String()
    patch_url = fields.String()
    permalink_url = fields.String()
    status = fields.String()
    total_commits = fields.Integer()
    url = fields.String()


class Compare_commitsFilesItem(Schema):
    additions = fields.Integer()
    blob_url = fields.String()
    changes = fields.Integer()
    contents_url = fields.String()
    deletions = fields.Integer()
    filename = fields.String()
    patch = fields.String()
    raw_url = fields.String()
    sha = fields.String()
    status = fields.String()


class Compare_commitsCommitsItem(Schema):
    author = fields.Nested(lambda: Compare_commitsCommitsItemAuthor())
    commit = fields.Nested(lambda: Compare_commitsCommitsItemCommit())
    committer = fields.Nested(lambda: Compare_commitsCommitsItemCommitter())
    parents = fields.List(fields.Nested(lambda: Compare_commitsCommitsItemParentsItem()))
    sha = fields.String()
    url = fields.String()


class Compare_commitsCommitsItemParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class Compare_commitsCommitsItemCommitter(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Compare_commitsCommitsItemCommit(Schema):
    author = fields.Nested(lambda: Compare_commitsCommitsItemCommitAuthor())
    committer = fields.Nested(lambda: Compare_commitsCommitsItemCommitCommitter())
    message = fields.String()
    tree = fields.Nested(lambda: Compare_commitsCommitsItemCommitTree())
    url = fields.String()


class Compare_commitsCommitsItemCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class Compare_commitsCommitsItemCommitCommitter(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class Compare_commitsCommitsItemCommitAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class Compare_commitsCommitsItemAuthor(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Compare_commitsBase_commit(Schema):
    author = fields.Nested(lambda: Compare_commitsBase_commitAuthor())
    commit = fields.Nested(lambda: Compare_commitsBase_commitCommit())
    committer = fields.Nested(lambda: Compare_commitsBase_commitCommitter())
    parents = fields.List(fields.Nested(lambda: Compare_commitsBase_commitParentsItem()))
    sha = fields.String()
    url = fields.String()


class Compare_commitsBase_commitParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class Compare_commitsBase_commitCommitter(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Compare_commitsBase_commitCommit(Schema):
    author = fields.Nested(lambda: Compare_commitsBase_commitCommitAuthor())
    committer = fields.Nested(lambda: Compare_commitsBase_commitCommitCommitter())
    message = fields.String()
    tree = fields.Nested(lambda: Compare_commitsBase_commitCommitTree())
    url = fields.String()


class Compare_commitsBase_commitCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class Compare_commitsBase_commitCommitCommitter(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class Compare_commitsBase_commitCommitAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class Compare_commitsBase_commitAuthor(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Contents_path(Schema):
    _links = fields.Nested(lambda: Contents_path_links())
    content = fields.String()
    encoding = fields.String()
    git_url = fields.String()
    html_url = fields.String()
    name = fields.String()
    path = fields.String()
    sha = fields.String()
    size = fields.Integer()
    type = fields.String()
    url = fields.String()


class Contents_path_links(Schema):
    git = fields.String()
    html = fields.String()
    self = fields.String()


class ContributorsItem(Schema):
    avatar_url = fields.String()
    contributions = fields.Integer()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class ContributorsStatsItem(Schema):
    author = fields.Nested(lambda: ContributorsStatsItemAuthor())
    total = fields.Integer(description='The Total number of commits authored by the contributor.')
    weeks = fields.List(fields.Nested(lambda: ContributorsStatsItemWeeksItem()))


class ContributorsStatsItemWeeksItem(Schema):
    a = fields.Integer(description='Number of additions.')
    c = fields.Integer(description='Number of commits.')
    d = fields.Integer(description='Number of deletions.')
    w = fields.String(description='Start of the week.')


class ContributorsStatsItemAuthor(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class CreateDownload(Schema):
    accesskeyid = fields.String()
    acl = fields.String()
    bucket = fields.String()
    content_type = fields.String()
    description = fields.String()
    download_count = fields.Integer()
    expirationdate = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    html_url = fields.String()
    id = fields.Integer()
    mime_type = fields.String()
    name = fields.String()
    path = fields.String()
    policy = fields.String()
    prefix = fields.String()
    redirect = fields.Boolean()
    s3_url = fields.String()
    signature = fields.String()
    size = fields.Integer()
    url = fields.String()


class CreateFile(Schema):
    commit = fields.Nested(lambda: CreateFileCommit())
    content = fields.Nested(lambda: CreateFileContent())


class CreateFileContent(Schema):
    _links = fields.Nested(lambda: CreateFileContent_links())
    git_url = fields.String()
    html_url = fields.String()
    name = fields.String()
    path = fields.String()
    sha = fields.String()
    size = fields.Integer()
    type = fields.String()
    url = fields.String()


class CreateFileContent_links(Schema):
    git = fields.String()
    html = fields.String()
    self = fields.String()


class CreateFileCommit(Schema):
    author = fields.Nested(lambda: CreateFileCommitAuthor())
    committer = fields.Nested(lambda: CreateFileCommitCommitter())
    html_url = fields.String()
    message = fields.String()
    parents = fields.List(fields.Nested(lambda: CreateFileCommitParentsItem()))
    sha = fields.String()
    tree = fields.Nested(lambda: CreateFileCommitTree())
    url = fields.String()


class CreateFileCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class CreateFileCommitParentsItem(Schema):
    html_url = fields.String()
    sha = fields.String()
    url = fields.String()


class CreateFileCommitCommitter(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class CreateFileCommitAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class CreateFileBody(Schema):
    committer = fields.Nested(lambda: CreateFileBodyCommitter())
    content = fields.String()
    message = fields.String()


class CreateFileBodyCommitter(Schema):
    email = fields.String()
    name = fields.String()


class DeleteFile(Schema):
    commit = fields.Nested(lambda: DeleteFileCommit())
    content = fields.String()


class DeleteFileCommit(Schema):
    author = fields.Nested(lambda: DeleteFileCommitAuthor())
    committer = fields.Nested(lambda: DeleteFileCommitCommitter())
    html_url = fields.String()
    message = fields.String()
    parents = fields.Nested(lambda: DeleteFileCommitParents())
    sha = fields.String()
    tree = fields.Nested(lambda: DeleteFileCommitTree())
    url = fields.String()


class DeleteFileCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class DeleteFileCommitParents(Schema):
    html_url = fields.String()
    sha = fields.String()
    url = fields.String()


class DeleteFileCommitCommitter(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class DeleteFileCommitAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class DeleteFileBody(Schema):
    committer = fields.Nested(lambda: DeleteFileBodyCommitter())
    message = fields.String()
    sha = fields.String()


class DeleteFileBodyCommitter(Schema):
    email = fields.String()
    name = fields.String()


class Deployment(Schema):
    description = fields.String()
    payload = fields.Nested(lambda: DeploymentPayload())
    ref = fields.String()


class DeploymentPayload(Schema):
    deploy_user = fields.String()
    environment = fields.String()
    room_id = fields.Number()


class Deployment_resp(Schema):
    created_at = fields.String()
    creator = fields.Nested(lambda: Deployment_respCreator())
    description = fields.String()
    id = fields.Integer()
    payload = fields.String()
    sha = fields.String()
    statuses_url = fields.String()
    updated_at = fields.String()
    url = fields.String()


class Deployment_respCreator(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Deployment_statusesItem(Schema):
    created_at = fields.String()
    creator = fields.Nested(lambda: Deployment_statusesItemCreator())
    description = fields.String()
    id = fields.Integer()
    payload = fields.String()
    state = fields.String()
    target_url = fields.String()
    updated_at = fields.String()
    url = fields.String()


class Deployment_statusesItemCreator(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Deployment_statuses_create(Schema):
    description = fields.String()
    state = fields.String()
    target_url = fields.String()


class DownloadBody(Schema):
    content_type = fields.String()
    description = fields.String()
    name = fields.String(required=True)
    size = fields.Integer(required=True, description='Size of file in bytes.')


class Downloads(Schema):
    content_type = fields.String()
    description = fields.String()
    download_count = fields.Integer()
    html_url = fields.String()
    id = fields.Integer()
    name = fields.String()
    size = fields.Integer()
    url = fields.String()


class EditTeam(Schema):
    name = fields.String(required=True)
    permission = fields.String(validate=[OneOf(choices=['pull', 'push', 'admin'], labels=[])])


class Emojis(Schema):
    n100 = fields.String(data_key='100')
    n1234 = fields.String(data_key='1234')
    x1 = fields.String(data_key='+1')
    x_1 = fields.String(data_key='-1')
    n8ball = fields.String(data_key='8ball')
    a = fields.String()
    ab = fields.String()


class Event(Schema):
    actor = fields.Nested(lambda: EventActor())
    commit_id = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    event = fields.String()
    issue = fields.Nested(lambda: EventIssue())
    url = fields.String()


class EventIssue(Schema):
    assignee = fields.Nested(lambda: EventIssueAssignee())
    body = fields.String()
    closed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    comments = fields.Integer()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    html_url = fields.String()
    labels = fields.List(fields.Nested(lambda: EventIssueLabelsItem()))
    milestone = fields.Nested(lambda: EventIssueMilestone())
    number = fields.Integer()
    pull_request = fields.Nested(lambda: EventIssuePull_request())
    state = fields.String(validate=[OneOf(choices=['open', 'closed'], labels=[])])
    title = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: EventIssueUser())


class EventIssueUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class EventIssuePull_request(Schema):
    diff_url = fields.String()
    html_url = fields.String()
    patch_url = fields.String()


class EventIssueMilestone(Schema):
    closed_issues = fields.Integer()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    creator = fields.Nested(lambda: EventIssueMilestoneCreator())
    description = fields.String()
    due_on = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    number = fields.Integer()
    open_issues = fields.Integer()
    state = fields.String(validate=[OneOf(choices=['open', 'closed'], labels=[])])
    title = fields.String()
    url = fields.String()


class EventIssueMilestoneCreator(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class EventIssueLabelsItem(Schema):
    color = fields.String()
    name = fields.String()
    url = fields.String()


class EventIssueAssignee(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class EventActor(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Events(Schema):
    actor = fields.Nested(lambda: EventsActor())
    created_at = fields.Field()
    id = fields.Integer()
    org = fields.Nested(lambda: EventsOrg())
    payload = fields.Nested(lambda: EventsPayload())
    public = fields.Boolean()
    repo = fields.Nested(lambda: EventsRepo())
    type = fields.String()


class EventsRepo(Schema):
    id = fields.Integer()
    name = fields.String()
    url = fields.String()


class EventsPayload(Schema):
    pass


class EventsOrg(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class EventsActor(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Feeds(Schema):
    _links = fields.Nested(lambda: Feeds_links())
    current_user_actor_url = fields.String()
    current_user_organization_url = fields.String()
    current_user_public = fields.String()
    current_user_url = fields.String()
    timeline_url = fields.String()
    user_url = fields.String()


class Feeds_links(Schema):
    current_user = fields.Nested(lambda: Feeds_linksCurrent_user())
    current_user_actor = fields.Nested(lambda: Feeds_linksCurrent_user_actor())
    current_user_organization = fields.Nested(lambda: Feeds_linksCurrent_user_organization())
    current_user_public = fields.Nested(lambda: Feeds_linksCurrent_user_public())
    timeline = fields.Nested(lambda: Feeds_linksTimeline())
    user = fields.Nested(lambda: Feeds_linksUser())


class Feeds_linksUser(Schema):
    href = fields.String()
    type = fields.String()


class Feeds_linksTimeline(Schema):
    href = fields.String()
    type = fields.String()


class Feeds_linksCurrent_user_public(Schema):
    href = fields.String()
    type = fields.String()


class Feeds_linksCurrent_user_organization(Schema):
    href = fields.String()
    type = fields.String()


class Feeds_linksCurrent_user_actor(Schema):
    href = fields.String()
    type = fields.String()


class Feeds_linksCurrent_user(Schema):
    href = fields.String()
    type = fields.String()


class Fork(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: ForkOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class ForkOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class ForkBody(Schema):
    organization = fields.String()


class ForksItem(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: ForksItemOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class ForksItemOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Gist(Schema):
    comments = fields.Integer()
    comments_url = fields.String()
    created_at = fields.String(description='Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.')
    description = fields.String()
    files = fields.Nested(lambda: GistFiles())
    forks = fields.List(fields.Nested(lambda: GistForksItem()))
    git_pull_url = fields.String()
    git_push_url = fields.String()
    history = fields.List(fields.Nested(lambda: GistHistoryItem()))
    html_url = fields.String()
    id = fields.String()
    public = fields.Boolean()
    url = fields.String()
    user = fields.Nested(lambda: GistUser())


class GistUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class GistHistoryItem(Schema):
    change_status = fields.Nested(lambda: GistHistoryItemChange_status())
    committed_at = fields.String(description='Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.')
    url = fields.String()
    user = fields.Nested(lambda: GistHistoryItemUser())
    version = fields.String()


class GistHistoryItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class GistHistoryItemChange_status(Schema):
    additions = fields.Integer()
    deletions = fields.Integer()
    total = fields.Integer()


class GistForksItem(Schema):
    created_at = fields.String(description='Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.')
    url = fields.String()
    user = fields.Nested(lambda: GistForksItemUser())


class GistForksItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class GistFiles(Schema):
    ringerl = fields.Nested(lambda: GistFilesRingerl(), data_key='ring.erl')


class GistFilesRingerl(Schema):
    filename = fields.String()
    raw_url = fields.String()
    size = fields.Integer()


class GistsItem(Schema):
    comments = fields.Integer()
    comments_url = fields.String()
    created_at = fields.String()
    description = fields.String()
    files = fields.Nested(lambda: GistsItemFiles())
    git_pull_url = fields.String()
    git_push_url = fields.String()
    html_url = fields.String()
    id = fields.String()
    public = fields.Boolean()
    url = fields.String()
    user = fields.Nested(lambda: GistsItemUser())


class GistsItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class GistsItemFiles(Schema):
    ringerl = fields.Nested(lambda: GistsItemFilesRingerl(), data_key='ring.erl')


class GistsItemFilesRingerl(Schema):
    filename = fields.String()
    raw_url = fields.String()
    size = fields.Integer()


class GitCommit(Schema):
    author = fields.Nested(lambda: GitCommitAuthor())
    message = fields.String()
    parents = fields.String()
    tree = fields.String()


class GitCommitAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class GitRefPatch(Schema):
    force = fields.Boolean()
    sha = fields.String()


class GitignoreItem(Schema):
    pass


class Gitignore_lang(Schema):
    name = fields.String()
    source = fields.String()


class HeadBranch(Schema):
    object = fields.Nested(lambda: HeadBranchObject())
    ref = fields.String()
    url = fields.String()


class HeadBranchObject(Schema):
    sha = fields.String()
    type = fields.String()
    url = fields.String()


class HeadBranchBody(Schema):
    force = fields.Boolean(required=True, description='Boolean indicating whether to force the update or to make sure the update is a fast-forward update. The default is false, so leaving this out or setting it to false will make sure you’re not overwriting work.')
    sha = fields.String(required=True, description='String of the SHA1 value to set this reference to.')


class HeadsItem(Schema):
    commit = fields.Nested(lambda: HeadsItemCommit())
    name = fields.String()
    tarball_url = fields.String()
    zipball_url = fields.String()


class HeadsItemCommit(Schema):
    sha = fields.String()
    url = fields.String()


class HookItem(Schema):
    active = fields.Boolean()
    config = fields.Nested(lambda: HookItemConfig())
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    events = fields.List(fields.Nested(lambda: HookItemEventsItem(), validate=[OneOf(choices=['push', 'issues', 'issue_comment', 'commit_comment', 'pull_request', 'pull_request_review_comment', 'gollum', 'watch', 'download', 'fork', 'fork_apply', 'member', 'public', 'team_add', 'status'], labels=[])]))
    id = fields.Integer()
    name = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()


class HookItemEventsItem(Schema):
    pass


class HookItemConfig(Schema):
    content_type = fields.String()
    url = fields.String()


class HookBody(Schema):
    active = fields.Boolean()
    add_events = fields.List(fields.String())


class Issue(Schema):
    assignee = fields.String()
    body = fields.String()
    labels = fields.List(fields.String())
    milestone = fields.Number()
    title = fields.String()


class IssueBody(Schema):
    assignee = fields.String()
    body = fields.String()
    labels = fields.List(fields.String())
    milestone = fields.Number()
    title = fields.String()


class IssuesItem(Schema):
    assignee = fields.Nested(lambda: IssuesItemAssignee())
    body = fields.String()
    closed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    comments = fields.Integer()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    html_url = fields.String()
    labels = fields.List(fields.Nested(lambda: IssuesItemLabelsItem()))
    milestone = fields.Nested(lambda: IssuesItemMilestone())
    number = fields.Integer()
    pull_request = fields.Nested(lambda: IssuesItemPull_request())
    state = fields.String(validate=[OneOf(choices=['open', 'closed'], labels=[])])
    title = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: IssuesItemUser())


class IssuesItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class IssuesItemPull_request(Schema):
    diff_url = fields.String()
    html_url = fields.String()
    patch_url = fields.String()


class IssuesItemMilestone(Schema):
    closed_issues = fields.Integer()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    creator = fields.Nested(lambda: IssuesItemMilestoneCreator())
    description = fields.String()
    due_on = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    number = fields.Integer()
    open_issues = fields.Integer()
    state = fields.String(validate=[OneOf(choices=['open', 'closed'], labels=[])])
    title = fields.String()
    url = fields.String()


class IssuesItemMilestoneCreator(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class IssuesItemLabelsItem(Schema):
    color = fields.String()
    name = fields.String()
    url = fields.String()


class IssuesItemAssignee(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class IssuesComment(Schema):
    body = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    html_url = fields.String()
    id = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: IssuesCommentUser())


class IssuesCommentUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class IssuesCommentsItem(Schema):
    _links = fields.Nested(lambda: IssuesCommentsItem_links())
    body = fields.String()
    commit_id = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    id = fields.Integer()
    path = fields.String()
    position = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: IssuesCommentsItemUser())


class IssuesCommentsItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class IssuesCommentsItem_links(Schema):
    html = fields.Nested(lambda: IssuesCommentsItem_linksHtml())
    pull_request = fields.Nested(lambda: IssuesCommentsItem_linksPull_request())
    self = fields.Nested(lambda: IssuesCommentsItem_linksSelf())


class IssuesCommentsItem_linksSelf(Schema):
    href = fields.String()


class IssuesCommentsItem_linksPull_request(Schema):
    href = fields.String()


class IssuesCommentsItem_linksHtml(Schema):
    href = fields.String()


class Key(Schema):
    id = fields.Integer()
    key = fields.String()
    title = fields.String()
    url = fields.String()


class KeyBody(Schema):
    key = fields.String()
    title = fields.String()


class KeysItem(Schema):
    id = fields.Integer()
    key = fields.String()
    title = fields.String()
    url = fields.String()


class Label(Schema):
    color = fields.String(validate=[Length(min=6, max=6, equal=None)])
    name = fields.String()
    url = fields.String()


class LabelsItem(Schema):
    color = fields.String(validate=[Length(min=6, max=6, equal=None)])
    name = fields.String()
    url = fields.String()


class Languages(AdditionalPropertiesSchema):

    class Meta:
        additional_field = fields.Integer()



class Markdown(Schema):
    context = fields.String()
    mode = fields.String()
    text = fields.String()


class MembersItem(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Merge(Schema):
    merged = fields.Boolean()
    message = fields.String()
    sha = fields.String()


class MergePullBody(Schema):
    commit_message = fields.String()


class MergesBody(Schema):
    base = fields.String()
    commit_message = fields.String()
    head = fields.String()


class MergesConflict(Schema):
    message = fields.String(description='Error message')


class MergesSuccessful(Schema):
    author = fields.Nested(lambda: MergesSuccessfulAuthor())
    comments_url = fields.String()
    commit = fields.Nested(lambda: MergesSuccessfulCommit())
    committer = fields.Nested(lambda: MergesSuccessfulCommitter())
    merged = fields.Boolean()
    message = fields.String()
    parents = fields.List(fields.Nested(lambda: MergesSuccessfulParentsItem()))
    sha = fields.String()
    url = fields.String()


class MergesSuccessfulParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class MergesSuccessfulCommitter(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class MergesSuccessfulCommit(Schema):
    author = fields.Nested(lambda: MergesSuccessfulCommitAuthor())
    comment_count = fields.Integer()
    committer = fields.Nested(lambda: MergesSuccessfulCommitCommitter())
    message = fields.String()
    tree = fields.Nested(lambda: MergesSuccessfulCommitTree())
    url = fields.String()


class MergesSuccessfulCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class MergesSuccessfulCommitCommitter(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class MergesSuccessfulCommitAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class MergesSuccessfulAuthor(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Meta(Schema):
    git = fields.List(fields.String(description='An Array of IP addresses in CIDR format specifying the Git servers at GitHub.'))
    hooks = fields.List(fields.String(description='An Array of IP addresses in CIDR format specifying the addresses that incoming service hooks will originate from.'))


class Milestone(Schema):
    closed_issues = fields.Integer()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    creator = fields.Nested(lambda: MilestoneCreator())
    description = fields.String()
    due_on = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    number = fields.Integer()
    open_issues = fields.Integer()
    state = fields.String(validate=[OneOf(choices=['open', 'closed'], labels=[])])
    title = fields.String()
    url = fields.String()


class MilestoneCreator(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class MilestoneBody(Schema):
    description = fields.String()
    due_on = fields.String()
    state = fields.String()
    title = fields.String()


class MilestoneUpdate(Schema):
    description = fields.String()
    due_on = fields.String()
    state = fields.String()
    title = fields.String()


class NotificationMarkRead(Schema):
    last_read_at = fields.String()


class Notifications(Schema):
    id = fields.Integer()
    last_read_at = fields.String()
    reason = fields.String()
    repository = fields.Nested(lambda: NotificationsRepository())
    subject = fields.Nested(lambda: NotificationsSubject())
    unread = fields.Boolean()
    updated_at = fields.String()
    url = fields.String()


class NotificationsSubject(Schema):
    latest_comment_url = fields.String()
    title = fields.String()
    type = fields.String()
    url = fields.String()


class NotificationsRepository(Schema):
    description = fields.String()
    fork = fields.Boolean()
    full_name = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    name = fields.String()
    owner = fields.Nested(lambda: NotificationsRepositoryOwner())
    private = fields.Boolean()
    url = fields.String()


class NotificationsRepositoryOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class OrgMembersItem(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class OrgPublicMembersItem(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class OrgTeamsItem(Schema):
    id = fields.Integer()
    name = fields.String()
    url = fields.String()


class OrgTeamsPost(Schema):
    name = fields.String(required=True)
    permission = fields.String(validate=[OneOf(choices=['pull', 'push', 'admin'], labels=[])])
    repo_names = fields.List(fields.String())


class Organization(Schema):
    avatar_url = fields.String()
    blog = fields.String()
    company = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    followers = fields.Integer()
    following = fields.Integer()
    html_url = fields.String()
    id = fields.Integer()
    location = fields.String()
    login = fields.String()
    name = fields.String()
    public_gists = fields.Integer()
    public_repos = fields.Integer()
    type = fields.String()
    url = fields.String()


class OrganizationAsTeamMember(Schema):
    errors = fields.List(fields.Nested(lambda: OrganizationAsTeamMemberErrorsItem()))
    message = fields.String()


class OrganizationAsTeamMemberErrorsItem(Schema):
    code = fields.String()
    field = fields.String()
    resource = fields.String()


class ParticipationStats(Schema):
    all = fields.List(fields.Integer())
    owner = fields.List(fields.Integer())


class PatchGist(Schema):
    description = fields.String()
    files = fields.Nested(lambda: PatchGistFiles())


class PatchGistFiles(Schema):
    delete_this_filetxt = fields.String(data_key='delete_this_file.txt')
    file1txt = fields.Nested(lambda: PatchGistFilesFile1txt(), data_key='file1.txt')
    new_filetxt = fields.Nested(lambda: PatchGistFilesNew_filetxt(), data_key='new_file.txt')
    old_nametxt = fields.Nested(lambda: PatchGistFilesOld_nametxt(), data_key='old_name.txt')


class PatchGistFilesOld_nametxt(Schema):
    content = fields.String()
    filename = fields.String()


class PatchGistFilesNew_filetxt(Schema):
    content = fields.String()


class PatchGistFilesFile1txt(Schema):
    content = fields.String()


class PatchOrg(Schema):
    billing_email = fields.String(description='Billing email address. This address is not publicized.')
    company = fields.String()
    email = fields.String(description='Publicly visible email address.')
    location = fields.String()
    name = fields.String()


class PostComment(Schema):
    body = fields.String(required=True)


class PostGist(Schema):
    description = fields.String()
    files = fields.Nested(lambda: PostGistFiles())
    public = fields.Boolean()


class PostGistFiles(Schema):
    file1txt = fields.Nested(lambda: PostGistFilesFile1txt(), data_key='file1.txt')


class PostGistFilesFile1txt(Schema):
    content = fields.String()


class PostRepo(Schema):
    auto_init = fields.Boolean(description='True to create an initial commit with empty README. Default is false.')
    description = fields.String()
    gitignore_template = fields.String(description='Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, "Haskell" Ignored if auto_init parameter is not provided. ')
    has_downloads = fields.Boolean(description='True to enable downloads for this repository, false to disable them. Default is true.')
    has_issues = fields.Boolean(description='True to enable issues for this repository, false to disable them. Default is true.')
    has_wiki = fields.Boolean(description='True to enable the wiki for this repository, false to disable it. Default is true.')
    homepage = fields.String()
    name = fields.String(required=True)
    private = fields.Boolean(description='True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account.')
    team_id = fields.Integer(description='The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization.')


class PullRequest(Schema):
    _links = fields.Nested(lambda: PullRequest_links())
    additions = fields.Integer()
    base = fields.Nested(lambda: PullRequestBase())
    body = fields.String()
    changed_files = fields.Integer()
    closed_at = fields.String()
    comments = fields.Integer()
    commits = fields.Integer()
    created_at = fields.String()
    deletions = fields.Integer()
    diff_url = fields.String()
    head = fields.Nested(lambda: PullRequestHead())
    html_url = fields.String()
    issue_url = fields.String()
    merge_commit_sha = fields.String()
    mergeable = fields.Boolean()
    merged = fields.Boolean()
    merged_at = fields.String()
    merged_by = fields.Nested(lambda: PullRequestMerged_by())
    number = fields.Integer()
    patch_url = fields.String()
    state = fields.String()
    title = fields.String()
    updated_at = fields.String()
    url = fields.String()
    user = fields.Nested(lambda: PullRequestUser())


class PullRequestUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullRequestMerged_by(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullRequestHead(Schema):
    label = fields.String()
    ref = fields.String()
    repo = fields.Nested(lambda: PullRequestHeadRepo())
    sha = fields.String()
    user = fields.Nested(lambda: PullRequestHeadUser())


class PullRequestHeadUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullRequestHeadRepo(Schema):
    clone_url = fields.String()
    created_at = fields.String()
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.Field()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: PullRequestHeadRepoOwner())
    private = fields.Boolean()
    pushed_at = fields.String()
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String()
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class PullRequestHeadRepoOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullRequestBase(Schema):
    label = fields.String()
    ref = fields.String()
    repo = fields.Nested(lambda: PullRequestBaseRepo())
    sha = fields.String()
    user = fields.Nested(lambda: PullRequestBaseUser())


class PullRequestBaseUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullRequestBaseRepo(Schema):
    clone_url = fields.String()
    created_at = fields.String()
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.Field()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: PullRequestBaseRepoOwner())
    private = fields.Boolean()
    pushed_at = fields.String()
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String()
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class PullRequestBaseRepoOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullRequest_links(Schema):
    comments = fields.Nested(lambda: PullRequest_linksComments())
    html = fields.Nested(lambda: PullRequest_linksHtml())
    review_comments = fields.Nested(lambda: PullRequest_linksReview_comments())
    self = fields.Nested(lambda: PullRequest_linksSelf())


class PullRequest_linksSelf(Schema):
    href = fields.String()


class PullRequest_linksReview_comments(Schema):
    href = fields.String()


class PullRequest_linksHtml(Schema):
    href = fields.String()


class PullRequest_linksComments(Schema):
    href = fields.String()


class PullUpdate(Schema):
    body = fields.String()
    state = fields.String()
    title = fields.String()


class PullsItem(Schema):
    _links = fields.Nested(lambda: PullsItem_links())
    base = fields.Nested(lambda: PullsItemBase())
    body = fields.String()
    closed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    diff_url = fields.String()
    head = fields.Nested(lambda: PullsItemHead())
    html_url = fields.String()
    issue_url = fields.String()
    merged_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    number = fields.Integer()
    patch_url = fields.String()
    state = fields.String(validate=[OneOf(choices=['open', 'closed'], labels=[])])
    title = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: PullsItemUser())


class PullsItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsItemHead(Schema):
    label = fields.String()
    ref = fields.String()
    repo = fields.Nested(lambda: PullsItemHeadRepo())
    sha = fields.String()
    user = fields.Nested(lambda: PullsItemHeadUser())


class PullsItemHeadUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsItemHeadRepo(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: PullsItemHeadRepoOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class PullsItemHeadRepoOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsItemBase(Schema):
    label = fields.String()
    ref = fields.String()
    repo = fields.Nested(lambda: PullsItemBaseRepo())
    sha = fields.String()
    user = fields.Nested(lambda: PullsItemBaseUser())


class PullsItemBaseUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsItemBaseRepo(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: PullsItemBaseRepoOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class PullsItemBaseRepoOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsItem_links(Schema):
    comments = fields.Nested(lambda: PullsItem_linksComments())
    html = fields.Nested(lambda: PullsItem_linksHtml())
    review_comments = fields.Nested(lambda: PullsItem_linksReview_comments())
    self = fields.Nested(lambda: PullsItem_linksSelf())


class PullsItem_linksSelf(Schema):
    href = fields.String()


class PullsItem_linksReview_comments(Schema):
    href = fields.String()


class PullsItem_linksHtml(Schema):
    href = fields.String()


class PullsItem_linksComments(Schema):
    href = fields.String()


class PullsComment(Schema):
    _links = fields.Nested(lambda: PullsComment_links())
    body = fields.String()
    commit_id = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    id = fields.Integer()
    path = fields.String()
    position = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: PullsCommentUser())


class PullsCommentUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsComment_links(Schema):
    html = fields.Nested(lambda: PullsComment_linksHtml())
    pull_request = fields.Nested(lambda: PullsComment_linksPull_request())
    self = fields.Nested(lambda: PullsComment_linksSelf())


class PullsComment_linksSelf(Schema):
    href = fields.String()


class PullsComment_linksPull_request(Schema):
    href = fields.String()


class PullsComment_linksHtml(Schema):
    href = fields.String()


class PullsCommentPost(Schema):
    body = fields.String()
    commit_id = fields.String()
    path = fields.String()
    position = fields.Number()


class PullsCommentsItem(Schema):
    _links = fields.Nested(lambda: PullsCommentsItem_links())
    body = fields.String()
    commit_id = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    id = fields.Integer()
    path = fields.String()
    position = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: PullsCommentsItemUser())


class PullsCommentsItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class PullsCommentsItem_links(Schema):
    html = fields.Nested(lambda: PullsCommentsItem_linksHtml())
    pull_request = fields.Nested(lambda: PullsCommentsItem_linksPull_request())
    self = fields.Nested(lambda: PullsCommentsItem_linksSelf())


class PullsCommentsItem_linksSelf(Schema):
    href = fields.String()


class PullsCommentsItem_linksPull_request(Schema):
    href = fields.String()


class PullsCommentsItem_linksHtml(Schema):
    href = fields.String()


class PullsPost(Schema):
    base = fields.String()
    body = fields.String()
    head = fields.String()
    title = fields.String()


class PutSubscription(Schema):
    created_at = fields.String()
    ignored = fields.Boolean()
    reason = fields.Field()
    subscribed = fields.Boolean()
    thread_url = fields.String()
    url = fields.String()


class Rate_limit(Schema):
    rate = fields.Nested(lambda: Rate_limitRate())


class Rate_limitRate(Schema):
    limit = fields.Integer()
    remaining = fields.Integer()
    reset = fields.Integer()


class Readme(Schema):
    _links = fields.Nested(lambda: Readme_links())
    content = fields.String()
    encoding = fields.String()
    git_url = fields.String()
    html_url = fields.String()
    name = fields.String()
    path = fields.String()
    sha = fields.String()
    size = fields.Integer()
    type = fields.String()
    url = fields.String()


class Readme_links(Schema):
    git = fields.String()
    html = fields.String()
    self = fields.String()


class RefItem(Schema):
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    creator = fields.Nested(lambda: RefItemCreator())
    description = fields.String()
    id = fields.Integer()
    state = fields.String()
    target_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()


class RefItemCreator(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class RefBody(Schema):
    object = fields.Nested(lambda: RefBodyObject())
    ref = fields.String()
    url = fields.String()


class RefBodyObject(Schema):
    sha = fields.String()
    type = fields.String()
    url = fields.String()


class RefStatusItem(Schema):
    commit_url = fields.String()
    name = fields.String()
    repository_url = fields.String()
    sha = fields.String()
    state = fields.String()
    statuses = fields.List(fields.Nested(lambda: RefStatusItemStatusesItem()))


class RefStatusItemStatusesItem(Schema):
    context = fields.String()
    created_at = fields.String()
    description = fields.String()
    id = fields.Number()
    state = fields.String()
    target_url = fields.String()
    updated_at = fields.String()
    url = fields.String()


class RefsItem(Schema):
    object = fields.Nested(lambda: RefsItemObject())
    ref = fields.String()
    url = fields.String()


class RefsItemObject(Schema):
    sha = fields.String()
    type = fields.String()
    url = fields.String()


class RefsBody(Schema):
    ref = fields.String()
    sha = fields.String()


class Release(Schema):
    assets = fields.List(fields.Nested(lambda: ReleaseAssetsItem()))
    assets_url = fields.String()
    author = fields.Nested(lambda: ReleaseAuthor())
    body = fields.String()
    created_at = fields.String()
    draft = fields.Boolean()
    html_url = fields.String()
    id = fields.Integer()
    name = fields.String()
    prerelease = fields.Boolean()
    published_at = fields.String()
    tag_name = fields.String()
    tarball_url = fields.String()
    target_commitish = fields.String()
    upload_url = fields.String()
    url = fields.String()
    zipball_url = fields.String()


class ReleaseAuthor(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class ReleaseAssetsItem(Schema):
    content_type = fields.String()
    created_at = fields.String()
    download_count = fields.Integer()
    id = fields.Integer()
    label = fields.String()
    name = fields.String()
    size = fields.Integer()
    state = fields.String()
    updated_at = fields.String()
    uploader = fields.Nested(lambda: ReleaseAssetsItemUploader())
    url = fields.String()


class ReleaseAssetsItemUploader(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Release_create(Schema):
    body = fields.String()
    draft = fields.Boolean()
    name = fields.String()
    prerelease = fields.Boolean()
    tag_name = fields.String()
    target_commitish = fields.String()


class ReleasesItem(Schema):
    assets = fields.List(fields.Nested(lambda: ReleasesItemAssetsItem()))
    assets_url = fields.String()
    author = fields.Nested(lambda: ReleasesItemAuthor())
    body = fields.String()
    created_at = fields.String()
    draft = fields.Boolean()
    html_url = fields.String()
    id = fields.Integer()
    name = fields.String()
    prerelease = fields.Boolean()
    published_at = fields.String()
    tag_name = fields.String()
    tarball_url = fields.String()
    target_commitish = fields.String()
    upload_url = fields.String()
    url = fields.String()
    zipball_url = fields.String()


class ReleasesItemAuthor(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class ReleasesItemAssetsItem(Schema):
    content_type = fields.String()
    created_at = fields.String()
    download_count = fields.Integer()
    id = fields.Integer()
    label = fields.String()
    name = fields.String()
    size = fields.Integer()
    state = fields.String()
    updated_at = fields.String()
    uploader = fields.Nested(lambda: ReleasesItemAssetsItemUploader())
    url = fields.String()


class ReleasesItemAssetsItemUploader(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Repo(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    has_downloads = fields.Boolean()
    has_issues = fields.Boolean()
    has_wiki = fields.Boolean()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    organization = fields.Nested(lambda: RepoOrganization())
    owner = fields.Nested(lambda: RepoOwner())
    parent = fields.Nested(lambda: RepoParent(), description='Is present when the repo is a fork. Parent is the repo this repo was forked from.')
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    source = fields.Nested(lambda: RepoSource(), description='Is present when the repo is a fork. Source is the ultimate source for the network.')
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class RepoSource(Schema):
    """Is present when the repo is a fork. Source is the ultimate source for the network."""
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: RepoSourceOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class RepoSourceOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class RepoParent(Schema):
    """Is present when the repo is a fork. Parent is the repo this repo was forked from."""
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: RepoParentOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class RepoParentOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class RepoOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class RepoOrganization(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    type = fields.String()
    url = fields.String()


class Repo_deploymentsItem(Schema):
    created_at = fields.String()
    creator = fields.Nested(lambda: Repo_deploymentsItemCreator())
    description = fields.String()
    id = fields.Integer()
    payload = fields.String()
    sha = fields.String()
    statuses_url = fields.String()
    updated_at = fields.String()
    url = fields.String()


class Repo_deploymentsItemCreator(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    site_admin = fields.Boolean()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class RepoCommentsItem(Schema):
    body = fields.String()
    commit_id = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    html_url = fields.String()
    id = fields.Integer()
    line = fields.Integer()
    path = fields.String()
    position = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    user = fields.Nested(lambda: RepoCommentsItemUser())


class RepoCommentsItemUser(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class RepoCommit(Schema):
    author = fields.Nested(lambda: RepoCommitAuthor())
    committer = fields.Nested(lambda: RepoCommitCommitter())
    message = fields.String()
    parents = fields.List(fields.Nested(lambda: RepoCommitParentsItem()))
    sha = fields.String()
    tree = fields.Nested(lambda: RepoCommitTree())
    url = fields.String()


class RepoCommitTree(Schema):
    sha = fields.String()
    url = fields.String()


class RepoCommitParentsItem(Schema):
    sha = fields.String()
    url = fields.String()


class RepoCommitCommitter(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class RepoCommitAuthor(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class RepoCommitBody(Schema):
    author = fields.Nested(lambda: RepoCommitBodyAuthor())
    message = fields.String(required=True)
    parents = fields.List(fields.String(), required=True)
    tree = fields.String(required=True)


class RepoCommitBodyAuthor(Schema):
    date = fields.String()
    email = fields.String()
    name = fields.String()


class RepoEdit(Schema):
    description = fields.String()
    has_downloads = fields.Boolean()
    has_issues = fields.Boolean()
    has_wiki = fields.Boolean()
    homepage = fields.String()
    name = fields.String()
    private = fields.Boolean()


class ReposItem(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: ReposItemOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class ReposItemOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class RepositoriesItem(Schema):
    description = fields.String()
    fork = fields.Boolean()
    full_name = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    name = fields.String()
    owner = fields.Nested(lambda: RepositoriesItemOwner())
    private = fields.Boolean()
    url = fields.String()


class RepositoriesItemOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Search_code(Schema):
    items = fields.List(fields.Nested(lambda: Search_codeItemsItem()))
    total_count = fields.Integer()


class Search_codeItemsItem(Schema):
    git_url = fields.String()
    html_url = fields.String()
    name = fields.String()
    path = fields.String()
    repository = fields.Nested(lambda: Search_codeItemsItemRepository())
    score = fields.Number()
    sha = fields.String()
    url = fields.String()


class Search_codeItemsItemRepository(Schema):
    archive_url = fields.String()
    assignees_url = fields.String()
    blobs_url = fields.String()
    branches_url = fields.String()
    collaborators_url = fields.String()
    comments_url = fields.String()
    commits_url = fields.String()
    compare_url = fields.String()
    contents_url = fields.String()
    contributors_url = fields.String()
    description = fields.String()
    downloads_url = fields.String()
    events_url = fields.String()
    fork = fields.Boolean()
    forks_url = fields.String()
    full_name = fields.String()
    git_commits_url = fields.String()
    git_refs_url = fields.String()
    git_tags_url = fields.String()
    hooks_url = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    issue_comment_url = fields.String()
    issue_events_url = fields.String()
    issues_url = fields.String()
    keys_url = fields.String()
    labels_url = fields.String()
    languages_url = fields.String()
    merges_url = fields.String()
    milestones_url = fields.String()
    name = fields.String()
    notifications_url = fields.String()
    owner = fields.Nested(lambda: Search_codeItemsItemRepositoryOwner())
    private = fields.Boolean()
    pulls_url = fields.String()
    stargazers_url = fields.String()
    statuses_url = fields.String()
    subscribers_url = fields.String()
    subscription_url = fields.String()
    tags_url = fields.String()
    teams_url = fields.String()
    trees_url = fields.String()
    url = fields.String()


class Search_codeItemsItemRepositoryOwner(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Search_issues(Schema):
    items = fields.List(fields.Nested(lambda: Search_issuesItemsItem()))
    total_count = fields.Integer()


class Search_issuesItemsItem(Schema):
    assignee = fields.Field()
    body = fields.String()
    closed_at = fields.Field()
    comments = fields.Integer()
    comments_url = fields.String()
    created_at = fields.String()
    events_url = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    labels = fields.List(fields.Nested(lambda: Search_issuesItemsItemLabelsItem()))
    labels_url = fields.String()
    milestone = fields.Field()
    number = fields.Integer()
    pull_request = fields.Nested(lambda: Search_issuesItemsItemPull_request())
    score = fields.Number()
    state = fields.String()
    title = fields.String()
    updated_at = fields.String()
    url = fields.String()
    user = fields.Nested(lambda: Search_issuesItemsItemUser())


class Search_issuesItemsItemUser(Schema):
    avatar_url = fields.String()
    events_url = fields.String()
    followers_url = fields.String()
    following_url = fields.String()
    gists_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    starred_url = fields.String()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Search_issuesItemsItemPull_request(Schema):
    diff_url = fields.Field()
    html_url = fields.Field()
    patch_url = fields.Field()


class Search_issuesItemsItemLabelsItem(Schema):
    color = fields.String()
    name = fields.String()
    url = fields.String()


class Search_issues_by_keyword(Schema):
    issues = fields.List(fields.Nested(lambda: Search_issues_by_keywordIssuesItem()))


class Search_issues_by_keywordIssuesItem(Schema):
    body = fields.String()
    comments = fields.Integer()
    created_at = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    labels = fields.List(fields.String())
    number = fields.Integer()
    position = fields.Integer()
    state = fields.String()
    title = fields.String()
    updated_at = fields.String()
    user = fields.String()
    votes = fields.Integer()


class Search_repositories(Schema):
    items = fields.List(fields.Nested(lambda: Search_repositoriesItemsItem()))
    total_count = fields.Integer()


class Search_repositoriesItemsItem(Schema):
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    default_branch = fields.String()
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: Search_repositoriesItemsItemOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    score = fields.Number()
    size = fields.Integer()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class Search_repositoriesItemsItemOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    received_events_url = fields.String()
    type = fields.String()
    url = fields.String()


class Search_repositories_by_keyword(Schema):
    repositories = fields.List(fields.Nested(lambda: Search_repositories_by_keywordRepositoriesItem()))


class Search_repositories_by_keywordRepositoriesItem(Schema):
    created = fields.String()
    created_at = fields.String()
    description = fields.String()
    followers = fields.Integer()
    fork = fields.Boolean()
    forks = fields.Integer()
    has_downloads = fields.Boolean()
    has_issues = fields.Boolean()
    has_wiki = fields.Boolean()
    homepage = fields.String()
    language = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    owner = fields.String()
    private = fields.Boolean()
    pushed = fields.String()
    pushed_at = fields.String()
    score = fields.Number()
    size = fields.Integer()
    type = fields.String()
    url = fields.String()
    username = fields.String()
    watchers = fields.Integer()


class Search_user_by_email(Schema):
    user = fields.Nested(lambda: Search_user_by_emailUser())


class Search_user_by_emailUser(Schema):
    blog = fields.String()
    company = fields.String()
    created = fields.String()
    created_at = fields.String()
    email = fields.String()
    followers_count = fields.Integer()
    following_count = fields.Integer()
    gravatar_id = fields.String()
    id = fields.Integer()
    location = fields.String()
    login = fields.String()
    name = fields.String()
    public_gist_count = fields.Integer()
    public_repo_count = fields.Integer()
    type = fields.String()


class Search_users(Schema):
    items = fields.List(fields.Nested(lambda: Search_usersItemsItem()))
    total_count = fields.Integer()


class Search_usersItemsItem(Schema):
    avatar_url = fields.String()
    followers_url = fields.String()
    gravatar_id = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    organizations_url = fields.String()
    received_events_url = fields.String()
    repos_url = fields.String()
    score = fields.Number()
    subscriptions_url = fields.String()
    type = fields.String()
    url = fields.String()


class Search_users_by_keyword(Schema):
    users = fields.List(fields.Nested(lambda: Search_users_by_keywordUsersItem()))


class Search_users_by_keywordUsersItem(Schema):
    created = fields.String()
    created_at = fields.String()
    followers = fields.Integer()
    followers_count = fields.Integer()
    fullname = fields.String()
    gravatar_id = fields.String()
    id = fields.String()
    language = fields.String()
    location = fields.String()
    login = fields.String()
    name = fields.String()
    public_repo_count = fields.Integer()
    repos = fields.Integer()
    score = fields.Number()
    type = fields.String()
    username = fields.String()


class StargazersItem(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Subscribition(Schema):
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    ignored = fields.Boolean()
    reason = fields.String()
    repository_url = fields.String()
    subscribed = fields.Boolean()
    url = fields.String()


class SubscribitionBody(Schema):
    ignored = fields.Boolean()
    subscribed = fields.Boolean()


class Subscription(Schema):
    created_at = fields.String()
    ignored = fields.Boolean()
    reason = fields.Boolean()
    subscribed = fields.Boolean()
    thread_url = fields.String()
    url = fields.String()


class Tag(Schema):
    message = fields.String()
    object = fields.Nested(lambda: TagObject())
    sha = fields.String()
    tag = fields.String()
    tagger = fields.Nested(lambda: TagTagger())
    url = fields.String()


class TagTagger(Schema):
    date = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String()
    name = fields.String()


class TagObject(Schema):
    sha = fields.String()
    type = fields.String()
    url = fields.String()


class Tags(Schema):
    message = fields.String(required=True, description='String of the tag message.')
    object = fields.String(required=True, description='String of the SHA of the git object this is tagging.')
    tag = fields.String(required=True)
    tagger = fields.Nested(lambda: TagsTagger(), required=True)
    type = fields.String(required=True, description='String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob.')


class TagsTagger(Schema):
    date = fields.String(description='Timestamp of when this object was tagged.')
    email = fields.String(description='String of the email of the author of the tag.')
    name = fields.String(description='String of the name of the author of the tag.')


class Team(Schema):
    id = fields.Integer()
    members_count = fields.Integer()
    name = fields.String()
    permission = fields.String()
    repos_count = fields.Integer()
    url = fields.String()


class TeamMembership(Schema):
    state = fields.String()
    url = fields.String()


class TeamReposItem(Schema):
    clone_url = fields.String()
    created_at = fields.String()
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.Field()
    master_branch = fields.String()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: TeamReposItemOwner())
    private = fields.Boolean()
    pushed_at = fields.String()
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String()
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class TeamReposItemOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class TeamsItem(Schema):
    id = fields.Integer()
    name = fields.String()
    url = fields.String()


class Teams_listItem(Schema):
    id = fields.Integer()
    members_count = fields.Integer()
    name = fields.String()
    organization = fields.Nested(lambda: Teams_listItemOrganization())
    permission = fields.String()
    repos_count = fields.Integer()
    url = fields.String()


class Teams_listItemOrganization(Schema):
    avatar_url = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Tree(Schema):
    sha = fields.String()
    tree = fields.List(fields.Nested(lambda: TreeTreeItem()))
    url = fields.String()


class TreeTreeItem(Schema):
    mode = fields.String()
    path = fields.String()
    sha = fields.String()
    size = fields.Integer()
    type = fields.String()
    url = fields.String()


class Trees(Schema):
    base_tree = fields.String()
    sha = fields.String(description='SHA1 checksum ID of the object in the tree.')
    tree = fields.List(fields.Nested(lambda: TreesTreeItem()))
    url = fields.String()


class TreesTreeItem(Schema):
    mode = fields.String(description='One of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit) or 120000 for a blob that specifies the path of a symlink.', validate=[OneOf(choices=['100644', '100755', '040000', '160000', '120000'], labels=[])])
    path = fields.String()
    sha = fields.String(description='SHA1 checksum ID of the object in the tree.')
    type = fields.String(validate=[OneOf(choices=['blob', 'tree', 'commit'], labels=[])])
    url = fields.String()


class User(Schema):
    avatar_url = fields.String()
    bio = fields.String()
    blog = fields.String()
    collaborators = fields.Integer()
    company = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    disk_usage = fields.Integer()
    email = fields.String()
    followers = fields.Integer()
    following = fields.Integer()
    gravatar_id = fields.String()
    hireable = fields.Boolean()
    html_url = fields.String()
    id = fields.Integer()
    location = fields.String()
    login = fields.String()
    name = fields.String()
    owned_private_repos = fields.Integer()
    plan = fields.Nested(lambda: UserPlan())
    private_gists = fields.Integer()
    public_gists = fields.Integer()
    public_repos = fields.Integer()
    total_private_repos = fields.Integer()
    type = fields.String()
    url = fields.String()


class UserPlan(Schema):
    collaborators = fields.Integer()
    name = fields.String()
    private_repos = fields.Integer()
    space = fields.Integer()


class User_emails_finalItem(Schema):
    pass


class User_keysItem(Schema):
    pass


class User_keys_keyId(Schema):
    id = fields.Integer()
    key = fields.String()
    title = fields.String()
    url = fields.String()


class User_keys_post(Schema):
    key = fields.String()
    title = fields.String()


class User_update(Schema):
    bio = fields.String()
    blog = fields.String()
    company = fields.String()
    email = fields.String()
    hireable = fields.Boolean()
    location = fields.String()
    name = fields.String()


class User_userId(Schema):
    avatar_url = fields.String()
    bio = fields.String()
    blog = fields.String()
    company = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    email = fields.String(description='Note: The returned email is the user’s publicly visible email address (or null if the user has not specified a public email address in their profile).')
    followers = fields.Integer()
    following = fields.Integer()
    gravatar_id = fields.String()
    hireable = fields.Boolean()
    html_url = fields.String()
    id = fields.Integer()
    location = fields.String()
    login = fields.String()
    name = fields.String()
    public_gists = fields.Integer()
    public_repos = fields.Integer()
    type = fields.String()
    url = fields.String()


class User_userId_starredItem(Schema):
    pass


class User_userId_subscribitionsItem(Schema):
    clone_url = fields.String()
    created_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    description = fields.String()
    fork = fields.Boolean()
    forks = fields.Integer()
    forks_count = fields.Integer()
    full_name = fields.String()
    git_url = fields.String()
    homepage = fields.String()
    html_url = fields.String()
    id = fields.Integer()
    language = fields.String()
    master_branch = fields.Integer()
    mirror_url = fields.String()
    name = fields.String()
    open_issues = fields.Integer()
    open_issues_count = fields.Integer()
    owner = fields.Nested(lambda: User_userId_subscribitionsItemOwner())
    private = fields.Boolean()
    pushed_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    size = fields.Integer()
    ssh_url = fields.String()
    svn_url = fields.String()
    updated_at = fields.String(description='ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ')
    url = fields.String()
    watchers = fields.Integer()
    watchers_count = fields.Integer()


class User_userId_subscribitionsItemOwner(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class UsersItem(Schema):
    avatar_url = fields.String()
    gravatar_id = fields.String()
    id = fields.Integer()
    login = fields.String()
    url = fields.String()


class Users_userId_keysItem(Schema):
    pass


class Users_userId_orgsItem(Schema):
    pass


class EmojisInput:
    class Get:
        """
        Lists all the emojis available to use on GitHub.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class EventsInput:
    class Get:
        """
        List public events.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class FeedsInput:
    class Get:
        """
        List Feeds.
        GitHub provides several timeline resources in Atom format. The Feeds API
         lists all the feeds available to the authenticating user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class GistsInput:
    class Get:
        """
        List the authenticated user's gists or if called anonymously, this will
        return all public gists.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            since = fields.String(description='Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.\nOnly gists updated at or after this time are returned.\n')


    class Post:
        """
        Create a gist.
        """

        class Body(PostGist):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class GistsPublicInput:
    class Get:
        """
        List all public gists.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            since = fields.String(description='Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.\nOnly gists updated at or after this time are returned.\n')




class GistsStarredInput:
    class Get:
        """
        List the authenticated user's starred gists.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            since = fields.String(description='Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.\nOnly gists updated at or after this time are returned.\n')




class GistsIdInput:
    class Delete:
        """
        Delete a gist.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')


    class Get:
        """
        Get a single gist.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')


    class Patch:
        """
        Edit a gist.
        """

        class Body(PatchGist):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')




class GistsIdCommentsInput:
    class Get:
        """
        List comments on a gist.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')


    class Post:
        """
        Create a commen
        """

        class Body(CommentBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')




class GistsIdCommentsCommentIdInput:
    class Delete:
        """
        Delete a comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')
            commentId = fields.Integer(required=True, description='Id of comment.')


    class Get:
        """
        Get a single comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')
            commentId = fields.Integer(required=True, description='Id of comment.')


    class Patch:
        """
        Edit a comment.
        """

        class Body(Comment):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')
            commentId = fields.Integer(required=True, description='Id of comment.')




class GistsIdForksInput:
    class Post:
        """
        Fork a gist.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')




class GistsIdStarInput:
    class Delete:
        """
        Unstar a gist.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')


    class Get:
        """
        Check if a gist is starred.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')


    class Put:
        """
        Star a gist.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of gist.')




class GitignoreTemplatesInput:
    class Get:
        """
        Listing available templates.
        List all templates available to pass as an option when creating a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class GitignoreTemplatesLanguageInput:
    class Get:
        """
        Get a single template.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            language = fields.String(required=True)




class IssuesInput:
    class Get:
        """
        List issues.
        List all issues across all the authenticated user's visible repositories.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            filter = fields.String(required=True, description="Issues assigned to you / created by you / mentioning you / you're\nsubscribed to updates for / All issues the authenticated user can see\n", validate=[OneOf(choices=['assigned', 'created', 'mentioned', 'subscribed', 'all'], labels=[])])
            state = fields.String(required=True, validate=[OneOf(choices=['open', 'closed'], labels=[])])
            labels = fields.String(required=True, description='String list of comma separated Label names. Example - bug,ui,@high.')
            sort = fields.String(required=True, validate=[OneOf(choices=['created', 'updated', 'comments'], labels=[])])
            direction = fields.String(required=True, validate=[OneOf(choices=['asc', 'desc'], labels=[])])
            since = fields.String(description='Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nOnly issues updated at or after this time are returned.\n')




class LegacyIssuesSearchOwnerRepositoryStateKeywordInput:
    class Get:
        """
        Find issues by state and keyword.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            keyword = fields.String(required=True, description='The search term.')
            state = fields.String(required=True, description='Indicates the state of the issues to return. Can be either open or closed.', validate=[OneOf(choices=['open', 'closed'], labels=[])])
            owner = fields.String(required=True)
            repository = fields.String(required=True)




class LegacyReposSearchKeywordInput:
    class Get:
        """
        Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the start_page parameter.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            keyword = fields.String(required=True, description='The search term')

        class Query(Schema):
            order = fields.String(description='The sort field. if sort param is provided. Can be either asc or desc.', missing=lambda: 'desc', validate=[OneOf(choices=['desc', 'asc'], labels=[])])
            language = fields.String(description='Filter results by language')
            start_page = fields.String(description='The page number to fetch')
            sort = fields.String(description='The sort field. One of stars, forks, or updated. Default: results are sorted by best match.', validate=[OneOf(choices=['updated', 'stars', 'forks'], labels=[])])




class LegacyUserEmailEmailInput:
    class Get:
        """
        This API call is added for compatibility reasons only.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            email = fields.String(required=True, description='The email address')




class LegacyUserSearchKeywordInput:
    class Get:
        """
        Find users by keyword.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            keyword = fields.String(required=True, description='The search term')

        class Query(Schema):
            order = fields.String(description='The sort field. if sort param is provided. Can be either asc or desc.', missing=lambda: 'desc', validate=[OneOf(choices=['desc', 'asc'], labels=[])])
            start_page = fields.String(description='The page number to fetch')
            sort = fields.String(description='The sort field. One of stars, forks, or updated. Default: results are sorted by best match.', validate=[OneOf(choices=['updated', 'stars', 'forks'], labels=[])])




class MarkdownInput:
    class Post:
        """
        Render an arbitrary Markdown document
        """

        class Body(Markdown):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class MarkdownRawInput:
    class Post:
        """
        Render a Markdown document in raw mode
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class MetaInput:
    class Get:
        """
        This gives some information about GitHub.com, the service.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class NetworksOwnerRepoEventsInput:
    class Get:
        """
        List public events for a network of repositories.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of the owner.')
            repo = fields.String(required=True, description='Name of repository.')




class NotificationsInput:
    class Get:
        """
        List your notifications.
        List all notifications for the current user, grouped by repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            all = fields.Boolean(description='True to show notifications marked as read.')
            participating = fields.Boolean(description='True to show only notifications in which the user is directly participating\nor mentioned.\n')
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')


    class Put:
        """
        Mark as read.
        Marking a notification as "read" removes it from the default view on GitHub.com.
        """

        class Body(NotificationMarkRead):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class NotificationsThreadsIdInput:
    class Get:
        """
        View a single thread.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of thread.')


    class Patch:
        """
        Mark a thread as read
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of thread.')




class NotificationsThreadsIdSubscriptionInput:
    class Delete:
        """
        Delete a Thread Subscription.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of thread.')


    class Get:
        """
        Get a Thread Subscription.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of thread.')


    class Put:
        """
        Set a Thread Subscription.
        This lets you subscribe to a thread, or ignore it. Subscribing to a thread
        is unnecessary if the user is already subscribed to the repository. Ignoring
        a thread will mute all future notifications (until you comment or get @mentioned).
        """

        class Body(PutSubscription):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            id = fields.Integer(required=True, description='Id of thread.')




class OrgsOrgInput:
    class Get:
        """
        Get an Organization.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')


    class Patch:
        """
        Edit an Organization.
        """

        class Body(PatchOrg):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')




class OrgsOrgEventsInput:
    class Get:
        """
        List public events for an organization.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')




class OrgsOrgIssuesInput:
    class Get:
        """
        List issues.
        List all issues for a given organization for the authenticated user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')

        class Query(Schema):
            filter = fields.String(required=True, description="Issues assigned to you / created by you / mentioning you / you're\nsubscribed to updates for / All issues the authenticated user can see\n", validate=[OneOf(choices=['assigned', 'created', 'mentioned', 'subscribed', 'all'], labels=[])])
            state = fields.String(required=True, validate=[OneOf(choices=['open', 'closed'], labels=[])])
            labels = fields.String(required=True, description='String list of comma separated Label names. Example - bug,ui,@high.')
            sort = fields.String(required=True, validate=[OneOf(choices=['created', 'updated', 'comments'], labels=[])])
            direction = fields.String(required=True, validate=[OneOf(choices=['asc', 'desc'], labels=[])])
            since = fields.String(description='Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nOnly issues updated at or after this time are returned.\n')




class OrgsOrgMembersInput:
    class Get:
        """
        Members list.
        List all users who are members of an organization. A member is a user tha
        belongs to at least 1 team in the organization. If the authenticated user
        is also an owner of this organization then both concealed and public members
        will be returned. If the requester is not an owner of the organization the
        query will be redirected to the public members list.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')




class OrgsOrgMembersUsernameInput:
    class Delete:
        """
        Remove a member.
        Removing a user from this list will remove them from all teams and they
        will no longer have any access to the organization's repositories.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')
            username = fields.String(required=True, description='Name of the user.')


    class Get:
        """
        Check if a user is, publicly or privately, a member of the organization.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')
            username = fields.String(required=True, description='Name of the user.')




class OrgsOrgPublicMembersInput:
    class Get:
        """
        Public members list.
        Members of an organization can choose to have their membership publicized
        or not.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')




class OrgsOrgPublicMembersUsernameInput:
    class Delete:
        """
        Conceal a user's membership.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')
            username = fields.String(required=True, description='Name of the user.')


    class Get:
        """
        Check public membership.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')
            username = fields.String(required=True, description='Name of the user.')


    class Put:
        """
        Publicize a user's membership.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')
            username = fields.String(required=True, description='Name of the user.')




class OrgsOrgReposInput:
    class Get:
        """
        List repositories for the specified org.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')

        class Query(Schema):
            type = fields.String(missing=lambda: 'all', validate=[OneOf(choices=['all', 'public', 'private', 'forks', 'sources', 'member'], labels=[])])


    class Post:
        """
        Create a new repository for the authenticated user. OAuth users must supply
        repo scope.
        """

        class Body(PostRepo):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')




class OrgsOrgTeamsInput:
    class Get:
        """
        List teams.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')


    class Post:
        """
        Create team.
        In order to create a team, the authenticated user must be an owner of organization.
        """

        class Body(OrgTeamsPost):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            org = fields.String(required=True, description='Name of organisation.')




class RateLimitInput:
    class Get:
        """
        Get your current rate limit status
        Note: Accessing this endpoint does not count against your rate limit.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class ReposOwnerRepoInput:
    class Delete:
        """
        Delete a Repository.
        Deleting a repository requires admin access. If OAuth is used, the delete_repo
        scope is required.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Get:
        """
        Get repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Patch:
        """
        Edit repository.
        """

        class Body(RepoEdit):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoAssigneesInput:
    class Get:
        """
        List assignees.
        This call lists all the available assignees (owner + collaborators) to which
        issues may be assigned.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoAssigneesAssigneeInput:
    class Get:
        """
        Check assignee.
        You may also check to see if a particular user is an assignee for a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            assignee = fields.String(required=True, description='Login of the assignee.')




class ReposOwnerRepoBranchesInput:
    class Get:
        """
        Get list of branches
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoBranchesBranchInput:
    class Get:
        """
        Get Branch
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            branch = fields.String(required=True, description='Name of the branch.')




class ReposOwnerRepoCollaboratorsInput:
    class Get:
        """
        List.
        When authenticating as an organization owner of an organization-owned
        repository, all organization owners are included in the list of
        collaborators. Otherwise, only users with access to the repository are
        returned in the collaborators list.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoCollaboratorsUserInput:
    class Delete:
        """
        Remove collaborator.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            user = fields.String(required=True, description='Login of the user.')


    class Get:
        """
        Check if user is a collaborator
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            user = fields.String(required=True, description='Login of the user.')


    class Put:
        """
        Add collaborator.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            user = fields.String(required=True, description='Login of the user.')




class ReposOwnerRepoCommentsInput:
    class Get:
        """
        List commit comments for a repository.
        Comments are ordered by ascending ID.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoCommentsCommentIdInput:
    class Delete:
        """
        Delete a commit comment
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='Id of comment.')


    class Get:
        """
        Get a single commit comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='Id of comment.')


    class Patch:
        """
        Update a commit comment.
        """

        class Body(CommentBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='Id of comment.')




class ReposOwnerRepoCommitsInput:
    class Get:
        """
        List commits on a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')
            sha = fields.String(description='Sha or branch to start listing commits from.')
            path = fields.String(description='Only commits containing this file path will be returned.')
            author = fields.String(description='GitHub login, name, or email by which to filter by commit author.')
            until = fields.String(description='ISO 8601 Date - Only commits before this date will be returned.')




class ReposOwnerRepoCommitsRefStatusInput:
    class Get:
        """
        Get the combined Status for a specific Ref
        The Combined status endpoint is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the blog post for full details.
        To access this endpoint during the preview period, you must provide a custom media type in the Accept header:
        application/vnd.github.she-hulk-preview+json
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            ref = fields.String(required=True)




class ReposOwnerRepoCommitsShaCodeInput:
    class Get:
        """
        Get a single commit.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True, description='SHA-1 code of the commit.')




class ReposOwnerRepoCommitsShaCodeCommentsInput:
    class Get:
        """
        List comments for a single commitList comments for a single commit.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True, description='SHA-1 code of the commit.')


    class Post:
        """
        Create a commit comment.
        """

        class Body(CommitBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True, description='SHA-1 code of the commit.')




class ReposOwnerRepoCompareBaseIdheadIdInput:
    class Get:
        """
        Compare two commits
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            baseId = fields.String(required=True)
            headId = fields.String(required=True)




class ReposOwnerRepoContentsPathInput:
    class Delete:
        """
        Delete a file.
        This method deletes a file in a repository.
        """

        class Body(DeleteFileBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            path = fields.String(required=True)


    class Get:
        """
        Get contents.
        This method returns the contents of a file or directory in a repository.
        Files and symlinks support a custom media type for getting the raw content.
        Directories and submodules do not support custom media types.
        Note: This API supports files up to 1 megabyte in size.
        Here can be many outcomes. For details see "http://developer.github.com/v3/repos/contents/"
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            path = fields.String(required=True)

        class Query(Schema):
            path = fields.String(description='The content path.')
            ref = fields.String(description="The String name of the Commit/Branch/Tag. Defaults to 'master'.")


    class Put:
        """
        Create a file.
        """

        class Body(CreateFileBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            path = fields.String(required=True)




class ReposOwnerRepoContributorsInput:
    class Get:
        """
        Get list of contributors.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            anon = fields.String(required=True, description='Set to 1 or true to include anonymous contributors in results.')




class ReposOwnerRepoDeploymentsInput:
    class Get:
        """
        Users with pull access can view deployments for a repository
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Post:
        """
        Users with push access can create a deployment for a given ref
        """

        class Body(Deployment):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoDeploymentsIdStatusesInput:
    class Get:
        """
        Users with pull access can view deployment statuses for a deployment
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.Integer(required=True, description='The Deployment ID to list the statuses from.')


    class Post:
        """
        Create a Deployment Status
        Users with push access can create deployment statuses for a given deployment:
        """

        class Body(Deployment_statuses_create):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.Integer(required=True, description='The Deployment ID to list the statuses from.')




class ReposOwnerRepoDownloadsInput:
    class Get:
        """
        Deprecated. List downloads for a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoDownloadsDownloadIdInput:
    class Delete:
        """
        Deprecated. Delete a download.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            downloadId = fields.Integer(required=True, description='Id of download.')


    class Get:
        """
        Deprecated. Get a single download.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            downloadId = fields.Integer(required=True, description='Id of download.')




class ReposOwnerRepoEventsInput:
    class Get:
        """
        Get list of repository events.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoForksInput:
    class Get:
        """
        List forks.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            sort = fields.String(missing=lambda: 'newes', validate=[OneOf(choices=['newes', 'oldes', 'watchers'], labels=[])])


    class Post:
        """
        Create a fork.
        Forking a Repository happens asynchronously. Therefore, you may have to wai
        a short period before accessing the git objects. If this takes longer than 5
        minutes, be sure to contact Support.
        """

        class Body(ForkBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoGitBlobsInput:
    class Post:
        """
        Create a Blob.
        """

        class Body(Blob):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoGitBlobsShaCodeInput:
    class Get:
        """
        Get a Blob.
        Since blobs can be any arbitrary binary data, the input and responses for
        the blob API takes an encoding parameter that can be either utf-8 or
        base64. If your data cannot be losslessly sent as a UTF-8 string, you can
        base64 encode it.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True, description='SHA-1 code.')




class ReposOwnerRepoGitCommitsInput:
    class Post:
        """
        Create a Commit.
        """

        class Body(RepoCommitBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoGitCommitsShaCodeInput:
    class Get:
        """
        Get a Commit.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True, description='SHA-1 code.')




class ReposOwnerRepoGitRefsInput:
    class Get:
        """
        Get all References
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Post:
        """
        Create a Reference
        """

        class Body(RefsBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoGitRefsRefInput:
    class Delete:
        """
        Delete a Reference
        Example: Deleting a branch: DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a 
        Example: Deleting a tag:        DELETE /repos/octocat/Hello-World/git/refs/tags/v1.0
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            ref = fields.String(required=True)


    class Get:
        """
        Get a Reference
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            ref = fields.String(required=True)


    class Patch:
        """
        Update a Reference
        """

        class Body(GitRefPatch):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            ref = fields.String(required=True)




class ReposOwnerRepoGitTagsInput:
    class Post:
        """
        Create a Tag Object.
        Note that creating a tag object does not create the reference that makes a
        tag in Git. If you want to create an annotated tag in Git, you have to do
        this call to create the tag object, and then create the refs/tags/[tag]
        reference. If you want to create a lightweight tag, you only have to create
        the tag reference - this call would be unnecessary.
        """

        class Body(Tag):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoGitTagsShaCodeInput:
    class Get:
        """
        Get a Tag.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True)




class ReposOwnerRepoGitTreesInput:
    class Post:
        """
        Create a Tree.
        The tree creation API will take nested entries as well. If both a tree and
        a nested path modifying that tree are specified, it will overwrite the
        contents of that tree with the new path contents and write a new tree out.
        """

        class Body(Tree):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoGitTreesShaCodeInput:
    class Get:
        """
        Get a Tree.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            shaCode = fields.String(required=True, description='Tree SHA.')

        class Query(Schema):
            recursive = fields.Integer(description='Get a Tree Recursively. (0 or 1)')




class ReposOwnerRepoHooksInput:
    class Get:
        """
        Get list of hooks.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Post:
        """
        Create a hook.
        """

        class Body(HookBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoHooksHookIdInput:
    class Delete:
        """
        Delete a hook.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            hookId = fields.Integer(required=True, description='Id of hook.')


    class Get:
        """
        Get single hook.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            hookId = fields.Integer(required=True, description='Id of hook.')


    class Patch:
        """
        Edit a hook.
        """

        class Body(HookBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            hookId = fields.Integer(required=True, description='Id of hook.')




class ReposOwnerRepoHooksHookIdTestsInput:
    class Post:
        """
        Test a push hook.
        This will trigger the hook with the latest push to the current repository
        if the hook is subscribed to push events. If the hook is not subscribed
        to push events, the server will respond with 204 but no test POST will
        be generated.
        Note: Previously /repos/:owner/:repo/hooks/:id/tes
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            hookId = fields.Integer(required=True, description='Id of hook.')




class ReposOwnerRepoIssuesInput:
    class Get:
        """
        List issues for a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            filter = fields.String(required=True, description="Issues assigned to you / created by you / mentioning you / you're\nsubscribed to updates for / All issues the authenticated user can see\n", validate=[OneOf(choices=['assigned', 'created', 'mentioned', 'subscribed', 'all'], labels=[])])
            state = fields.String(required=True, validate=[OneOf(choices=['open', 'closed'], labels=[])])
            labels = fields.String(required=True, description='String list of comma separated Label names. Example - bug,ui,@high.')
            sort = fields.String(required=True, validate=[OneOf(choices=['created', 'updated', 'comments'], labels=[])])
            direction = fields.String(required=True, validate=[OneOf(choices=['asc', 'desc'], labels=[])])
            since = fields.String(description='Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nOnly issues updated at or after this time are returned.\n')


    class Post:
        """
        Create an issue.
        Any user with pull access to a repository can create an issue.
        """

        class Body(Issue):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoIssuesCommentsInput:
    class Get:
        """
        List comments in a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            direction = fields.String(description="Ignored without 'sort' parameter.")
            sort = fields.String(description='', validate=[OneOf(choices=['created', 'updated'], labels=[])])
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')




class ReposOwnerRepoIssuesCommentsCommentIdInput:
    class Delete:
        """
        Delete a comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='ID of comment.')


    class Get:
        """
        Get a single comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='ID of comment.')


    class Patch:
        """
        Edit a comment.
        """

        class Body(CommentBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='ID of comment.')




class ReposOwnerRepoIssuesEventsInput:
    class Get:
        """
        List issue events for a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoIssuesEventsEventIdInput:
    class Get:
        """
        Get a single event.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            eventId = fields.Integer(required=True, description='Id of the event.')




class ReposOwnerRepoIssuesNumberInput:
    class Get:
        """
        Get a single issue
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')


    class Patch:
        """
        Edit an issue.
        Issue owners and users with push access can edit an issue.
        """

        class Body(Issue):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')




class ReposOwnerRepoIssuesNumberCommentsInput:
    class Get:
        """
        List comments on an issue.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')


    class Post:
        """
        Create a comment.
        """

        class Body(CommentBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')




class ReposOwnerRepoIssuesNumberEventsInput:
    class Get:
        """
        List events for an issue.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')




class ReposOwnerRepoIssuesNumberLabelsInput:
    class Delete:
        """
        Remove all labels from an issue.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')


    class Get:
        """
        List labels on an issue.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')


    class Post:
        """
        Add labels to an issue.
        """

        class Body(PrimitiveValueSchema):
            class schema_class(Schema):
                value = fields.List(fields.String())


        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')


    class Put:
        """
        Replace all labels for an issue.
        Sending an empty array ([]) will remove all Labels from the Issue.
        """

        class Body(PrimitiveValueSchema):
            class schema_class(Schema):
                value = fields.List(fields.String())


        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')




class ReposOwnerRepoIssuesNumberLabelsNameInput:
    class Delete:
        """
        Remove a label from an issue.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of issue.')
            name = fields.String(required=True, description='Name of the label.')




class ReposOwnerRepoKeysInput:
    class Get:
        """
        Get list of keys.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Post:
        """
        Create a key.
        """

        class Body(User_keys_post):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoKeysKeyIdInput:
    class Delete:
        """
        Delete a key.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            keyId = fields.Integer(required=True, description='Id of key.')


    class Get:
        """
        Get a key
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            keyId = fields.Integer(required=True, description='Id of key.')




class ReposOwnerRepoLabelsInput:
    class Get:
        """
        List all labels for this repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Post:
        """
        Create a label.
        """

        class Body(PrimitiveValueSchema):
            class schema_class(Schema):
                value = fields.List(fields.String())


        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoLabelsNameInput:
    class Delete:
        """
        Delete a label.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            name = fields.String(required=True, description='Name of the label.')


    class Get:
        """
        Get a single label.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            name = fields.String(required=True, description='Name of the label.')


    class Patch:
        """
        Update a label.
        """

        class Body(PrimitiveValueSchema):
            class schema_class(Schema):
                value = fields.List(fields.String())


        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            name = fields.String(required=True, description='Name of the label.')




class ReposOwnerRepoLanguagesInput:
    class Get:
        """
        List languages.
        List languages for the specified repository. The value on the right of a
        language is the number of bytes of code written in that language.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoMergesInput:
    class Post:
        """
        Perform a merge.
        """

        class Body(MergesBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoMilestonesInput:
    class Get:
        """
        List milestones for a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            state = fields.String(description='String to filter by state.', missing=lambda: 'open', validate=[OneOf(choices=['open', 'closed'], labels=[])])
            direction = fields.String(description="Ignored without 'sort' parameter.")
            sort = fields.String(description='', missing=lambda: 'due_date', validate=[OneOf(choices=['due_date', 'completeness'], labels=[])])


    class Post:
        """
        Create a milestone.
        """

        class Body(MilestoneUpdate):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoMilestonesNumberInput:
    class Delete:
        """
        Delete a milestone.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of milestone.')


    class Get:
        """
        Get a single milestone.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of milestone.')


    class Patch:
        """
        Update a milestone.
        """

        class Body(MilestoneUpdate):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of milestone.')




class ReposOwnerRepoMilestonesNumberLabelsInput:
    class Get:
        """
        Get labels for every issue in a milestone.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Number of milestone.')




class ReposOwnerRepoNotificationsInput:
    class Get:
        """
        List your notifications in a repository
        List all notifications for the current user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            all = fields.Boolean(description='True to show notifications marked as read.')
            participating = fields.Boolean(description='True to show only notifications in which the user is directly participating\nor mentioned.\n')
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')


    class Put:
        """
        Mark notifications as read in a repository.
        Marking all notifications in a repository as "read" removes them from the
        default view on GitHub.com.
        """

        class Body(NotificationMarkRead):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoPullsInput:
    class Get:
        """
        List pull requests.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            state = fields.String(description='String to filter by state.', missing=lambda: 'open', validate=[OneOf(choices=['open', 'closed'], labels=[])])
            head = fields.String(description="Filter pulls by head user and branch name in the format of 'user:ref-name'.\nExample: github:new-script-format.\n")
            base = fields.String(description='Filter pulls by base branch name. Example - gh-pages.')


    class Post:
        """
        Create a pull request.
        """

        class Body(PullsPost):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoPullsCommentsInput:
    class Get:
        """
        List comments in a repository.
        By default, Review Comments are ordered by ascending ID.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            direction = fields.String(description="Ignored without 'sort' parameter.")
            sort = fields.String(description='', validate=[OneOf(choices=['created', 'updated'], labels=[])])
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')




class ReposOwnerRepoPullsCommentsCommentIdInput:
    class Delete:
        """
        Delete a comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='Id of comment.')


    class Get:
        """
        Get a single comment.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='Id of comment.')


    class Patch:
        """
        Edit a comment.
        """

        class Body(CommentBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            commentId = fields.Integer(required=True, description='Id of comment.')




class ReposOwnerRepoPullsNumberInput:
    class Get:
        """
        Get a single pull request.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')


    class Patch:
        """
        Update a pull request.
        """

        class Body(PullUpdate):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')




class ReposOwnerRepoPullsNumberCommentsInput:
    class Get:
        """
        List comments on a pull request.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')


    class Post:
        """
        Create a comment.
          #TODO Alternative input ( http://developer.github.com/v3/pulls/comments/ )
          description: |
            Alternative Input.
            Instead of passing commit_id, path, and position you can reply to an
            existing Pull Request Comment like this:

                body
                   Required string
                in_reply_to
                   Required number - Comment id to reply to.
        """

        class Body(PullsCommentPost):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')




class ReposOwnerRepoPullsNumberCommitsInput:
    class Get:
        """
        List commits on a pull request.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')




class ReposOwnerRepoPullsNumberFilesInput:
    class Get:
        """
        List pull requests files.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')




class ReposOwnerRepoPullsNumberMergeInput:
    class Get:
        """
        Get if a pull request has been merged.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')


    class Put:
        """
        Merge a pull request (Merge Button's)
        """

        class Body(MergePullBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            number = fields.Integer(required=True, description='Id of pull.')




class ReposOwnerRepoReadmeInput:
    class Get:
        """
        Get the README.
        This method returns the preferred README for a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')

        class Query(Schema):
            ref = fields.String(description='The String name of the Commit/Branch/Tag. Defaults to master.')




class ReposOwnerRepoReleasesInput:
    class Get:
        """
        Users with push access to the repository will receive all releases (i.e., published releases and draft releases). Users with pull access will receive published releases only
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Post:
        """
        Create a release
        Users with push access to the repository can create a release.
        """

        class Body(Release_create):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoReleasesAssetsIdInput:
    class Delete:
        """
        Delete a release asset
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)


    class Get:
        """
        Get a single release asset
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)


    class Patch:
        """
        Edit a release asset
        Users with push access to the repository can edit a release asset.
        """

        class Body(AssetPatch):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)




class ReposOwnerRepoReleasesIdInput:
    class Delete:
        """
        Users with push access to the repository can delete a release.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)


    class Get:
        """
        Get a single release
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)


    class Patch:
        """
        Users with push access to the repository can edit a release
        """

        class Body(Release_create):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)




class ReposOwnerRepoReleasesIdAssetsInput:
    class Get:
        """
        List assets for a release
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            id = fields.String(required=True)




class ReposOwnerRepoStargazersInput:
    class Get:
        """
        List Stargazers.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoStatsCodeFrequencyInput:
    class Get:
        """
        Get the number of additions and deletions per week.
        Returns a weekly aggregate of the number of additions and deletions pushed
        to a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoStatsCommitActivityInput:
    class Get:
        """
        Get the last year of commit activity data.
        Returns the last year of commit activity grouped by week. The days array
        is a group of commits per day, starting on Sunday.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoStatsContributorsInput:
    class Get:
        """
        Get contributors list with additions, deletions, and commit counts.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoStatsParticipationInput:
    class Get:
        """
        Get the weekly commit count for the repo owner and everyone else.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoStatsPunchCardInput:
    class Get:
        """
        Get the number of commits per hour in each day.
        Each array contains the day number, hour number, and number of commits
        0-6 Sunday - Saturday
        0-23 Hour of day
        Number of commits

        For example, [2, 14, 25] indicates that there were 25 total commits, during
        the 2.00pm hour on Tuesdays. All times are based on the time zone of
        individual commits.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoStatusesRefInput:
    class Get:
        """
        List Statuses for a specific Ref.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            ref = fields.String(required=True, description='Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.\n')


    class Post:
        """
        Create a Status.
        """

        class Body(HeadBranch):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            ref = fields.String(required=True, description='Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.\n')




class ReposOwnerRepoSubscribersInput:
    class Get:
        """
        List watchers.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoSubscriptionInput:
    class Delete:
        """
        Delete a Repository Subscription.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Get:
        """
        Get a Repository Subscription.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Put:
        """
        Set a Repository Subscription
        """

        class Body(SubscribitionBody):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoTagsInput:
    class Get:
        """
        Get list of tags.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoTeamsInput:
    class Get:
        """
        Get list of teams
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoWatchersInput:
    class Get:
        """
        List Stargazers. New implementation.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')




class ReposOwnerRepoArchiveFormatPathInput:
    class Get:
        """
        Get archive link.
        This method will return a 302 to a URL to download a tarball or zipball
        archive for a repository. Please make sure your HTTP framework is
        configured to follow redirects or you will need to use the Location header
        to make a second GET request.
        Note: For private repositories, these links are temporary and expire quickly.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of repository owner.')
            repo = fields.String(required=True, description='Name of repository.')
            archive_format = fields.String(required=True, validate=[OneOf(choices=['tarball', 'zipball'], labels=[])])
            path = fields.String(required=True, description="Valid Git reference, defaults to 'master'.")




class RepositoriesInput:
    class Get:
        """
        List all public repositories.
        This provides a dump of every public repository, in the order that they
        were created.
        Note: Pagination is powered exclusively by the since parameter. is the
        Link header to get the URL for the next page of repositories.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')




class SearchCodeInput:
    class Get:
        """
        Search code.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            order = fields.String(description='The sort field. if sort param is provided. Can be either asc or desc.', missing=lambda: 'desc', validate=[OneOf(choices=['desc', 'asc'], labels=[])])
            q = fields.String(required=True, description="The search terms. This can be any combination of the supported code\nsearch parameters:\n'Search In' Qualifies which fields are searched. With this qualifier\nyou can restrict the search to just the file contents, the file path,\nor both.\n'Languages' Searches code based on the language it's written in.\n'Forks' Filters repositories based on the number of forks, and/or\nwhether code from forked repositories should be included in the results\nat all.\n'Size' Finds files that match a certain size (in bytes).\n'Path' Specifies the path that the resulting file must be at.\n'Extension' Matches files with a certain extension.\n'Users' or 'Repositories' Limits searches to a specific user or repository.\n")
            sort = fields.String(description="Can only be 'indexed', which indicates how recently a file has been indexed\nby the GitHub search infrastructure. If not provided, results are sorted\nby best match.\n", validate=[OneOf(choices=['indexed'], labels=[])])




class SearchIssuesInput:
    class Get:
        """
        Find issues by state and keyword. (This method returns up to 100 results per page.)
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            order = fields.String(description='The sort field. if sort param is provided. Can be either asc or desc.', missing=lambda: 'desc', validate=[OneOf(choices=['desc', 'asc'], labels=[])])
            q = fields.String(required=True, description='The q search term can also contain any combination of the supported issue search qualifiers:')
            sort = fields.String(description='The sort field. Can be comments, created, or updated. Default: results are sorted by best match.', validate=[OneOf(choices=['updated', 'created', 'comments'], labels=[])])




class SearchRepositoriesInput:
    class Get:
        """
        Search repositories.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            order = fields.String(description='The sort field. if sort param is provided. Can be either asc or desc.', missing=lambda: 'desc', validate=[OneOf(choices=['desc', 'asc'], labels=[])])
            q = fields.String(required=True, description="The search terms. This can be any combination of the supported repository\nsearch parameters:\n'Search In' Qualifies which fields are searched. With this qualifier you\ncan restrict the search to just the repository name, description, readme,\nor any combination of these.\n'Size' Finds repositories that match a certain size (in kilobytes).\n'Forks' Filters repositories based on the number of forks, and/or whether\nforked repositories should be included in the results at all.\n'Created' and 'Last Updated' Filters repositories based on times of\ncreation, or when they were last updated.\n'Users or Repositories' Limits searches to a specific user or repository.\n'Languages' Searches repositories based on the language they are written in.\n'Stars' Searches repositories based on the number of stars.\n")
            sort = fields.String(description='If not provided, results are sorted by best match.', validate=[OneOf(choices=['stars', 'forks', 'updated'], labels=[])])




class SearchUsersInput:
    class Get:
        """
        Search users.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            order = fields.String(description='The sort field. if sort param is provided. Can be either asc or desc.', missing=lambda: 'desc', validate=[OneOf(choices=['desc', 'asc'], labels=[])])
            q = fields.String(required=True, description="The search terms. This can be any combination of the supported user\nsearch parameters:\n'Search In' Qualifies which fields are searched. With this qualifier you\ncan restrict the search to just the username, public email, full name,\nlocation, or any combination of these.\n'Repository count' Filters users based on the number of repositories they\nhave.\n'Location' Filter users by the location indicated in their profile.\n'Language' Search for users that have repositories that match a certain\nlanguage.\n'Created' Filter users based on when they joined.\n'Followers' Filter users based on the number of followers they have.\n")
            sort = fields.String(description='If not provided, results are sorted by best match.', validate=[OneOf(choices=['followers', 'repositories', 'joined'], labels=[])])




class TeamsTeamIdInput:
    class Delete:
        """
        Delete team.
        In order to delete a team, the authenticated user must be an owner of the
        org that the team is associated with.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')


    class Get:
        """
        Get team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')


    class Patch:
        """
        Edit team.
        In order to edit a team, the authenticated user must be an owner of the org
        that the team is associated with.
        """

        class Body(EditTeam):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')




class TeamsTeamIdMembersInput:
    class Get:
        """
        List team members.
        In order to list members in a team, the authenticated user must be a member
        of the team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')




class TeamsTeamIdMembersUsernameInput:
    class Delete:
        """
        The "Remove team member" API is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Remove team membership API instead. It allows you to remove both active and pending memberships.

        Remove team member.
        In order to remove a user from a team, the authenticated user must have 'admin'
        permissions to the team or be an owner of the org that the team is associated
        with.
        NOTE This does not delete the user, it just remove them from the team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            username = fields.String(required=True, description='Name of a member.')


    class Get:
        """
        The "Get team member" API is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Get team membership API instead. It allows you to get both active and pending memberships.

        Get team member.
        In order to get if a user is a member of a team, the authenticated user mus
        be a member of the team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            username = fields.String(required=True, description='Name of a member.')


    class Put:
        """
        The API (described below) is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Add team membership API instead. It allows you to invite new organization members to your teams.

        Add team member.
        In order to add a user to a team, the authenticated user must have 'admin'
        permissions to the team or be an owner of the org that the team is associated
        with.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            username = fields.String(required=True, description='Name of a member.')




class TeamsTeamIdMembershipsUsernameInput:
    class Delete:
        """
        Remove team membership.
        In order to remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. NOTE: This does not delete the user, it just removes their membership from the team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            username = fields.String(required=True, description='Name of a member.')


    class Get:
        """
        Get team membership.
        In order to get a user's membership with a team, the authenticated user must be a member of the team or an owner of the team's organization.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            username = fields.String(required=True, description='Name of a member.')


    class Put:
        """
        Add team membership.
        In order to add a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with.

        If the user is already a part of the team's organization (meaning they're on at least one other team in the organization), this endpoint will add the user to the team.

        If the user is completely unaffiliated with the team's organization (meaning they're on none of the organization's teams), this endpoint will send an invitation to the user via email. This newly-created membership will be in the 'pending' state until the user accepts the invitation, at which point the membership will transition to the 'active' state and the user will be added as a member of the team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            username = fields.String(required=True, description='Name of a member.')




class TeamsTeamIdReposInput:
    class Get:
        """
        List team repos
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')




class TeamsTeamIdReposOrgRepoInput:
    class Put:
        """
        In order to add a repository to a team, the authenticated user must be an owner of the org that the team is associated with. Also, the repository must be owned by the organization, or a direct fork of a repository owned by the organization.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            org = fields.String(required=True, description='Name of a organization.')
            repo = fields.String(required=True, description='Name of a repository.')




class TeamsTeamIdReposOwnerRepoInput:
    class Delete:
        """
        In order to remove a repository from a team, the authenticated user must be an owner of the org that the team is associated with. NOTE: This does not delete the repository, it just removes it from the team.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            owner = fields.String(required=True, description='Name of a repository owner.')
            repo = fields.String(required=True, description='Name of a repository.')


    class Get:
        """
        Check if a team manages a repository
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            teamId = fields.Integer(required=True, description='Id of team.')
            owner = fields.String(required=True, description='Name of a repository owner.')
            repo = fields.String(required=True, description='Name of a repository.')




class UserInput:
    class Get:
        """
        Get the authenticated user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')


    class Patch:
        """
        Update the authenticated user.
        """

        class Body(User_update):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserEmailsInput:
    class Delete:
        """
        Delete email address(es).
        You can include a single email address or an array of addresses.
        """

        class Body(PrimitiveValueSchema):
            class schema_class(Schema):
                value = fields.List(fields.String())


        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')


    class Get:
        """
        List email addresses for a user.
        In the final version of the API, this method will return an array of hashes
        with extended information for each email address indicating if the address
        has been verified and if it's primary email address for GitHub.
        Until API v3 is finalized, use the application/vnd.github.v3 media type to
        get other response format.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')


    class Post:
        """
        Add email address(es).
        You can post a single email address or an array of addresses.
        """

        class Body(PrimitiveValueSchema):
            class schema_class(Schema):
                value = fields.List(fields.String())


        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserFollowersInput:
    class Get:
        """
        List the authenticated user's followers
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserFollowingInput:
    class Get:
        """
        List who the authenticated user is following.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserFollowingUsernameInput:
    class Delete:
        """
        Unfollow a user.
        Unfollowing a user requires the user to be logged in and authenticated with
        basic auth or OAuth with the user:follow scope.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')


    class Get:
        """
        Check if you are following a user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')


    class Put:
        """
        Follow a user.
        Following a user requires the user to be logged in and authenticated with
        basic auth or OAuth with the user:follow scope.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UserIssuesInput:
    class Get:
        """
        List issues.
        List all issues across owned and member repositories for the authenticated
        user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            filter = fields.String(required=True, description="Issues assigned to you / created by you / mentioning you / you're\nsubscribed to updates for / All issues the authenticated user can see\n", validate=[OneOf(choices=['assigned', 'created', 'mentioned', 'subscribed', 'all'], labels=[])])
            state = fields.String(required=True, validate=[OneOf(choices=['open', 'closed'], labels=[])])
            labels = fields.String(required=True, description='String list of comma separated Label names. Example - bug,ui,@high.')
            sort = fields.String(required=True, validate=[OneOf(choices=['created', 'updated', 'comments'], labels=[])])
            direction = fields.String(required=True, validate=[OneOf(choices=['asc', 'desc'], labels=[])])
            since = fields.String(description='Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nOnly issues updated at or after this time are returned.\n')




class UserKeysInput:
    class Get:
        """
        List your public keys.
        Lists the current user's keys. Management of public keys via the API requires
        that you are authenticated through basic auth, or OAuth with the 'user', 'write:public_key' scopes.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')


    class Post:
        """
        Create a public key.
        """

        class Body(User_keys_post):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserKeysKeyIdInput:
    class Delete:
        """
        Delete a public key. Removes a public key. Requires that you are authenticated via Basic Auth or via OAuth with at least admin:public_key scope.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            keyId = fields.Integer(required=True, description='ID of key.')


    class Get:
        """
        Get a single public key.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            keyId = fields.Integer(required=True, description='ID of key.')




class UserOrgsInput:
    class Get:
        """
        List public and private organizations for the authenticated user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserReposInput:
    class Get:
        """
        List repositories for the authenticated user. Note that this does not include
        repositories owned by organizations which the user can access. You can lis
        user organizations and list organization repositories separately.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            type = fields.String(missing=lambda: 'all', validate=[OneOf(choices=['all', 'public', 'private', 'forks', 'sources', 'member'], labels=[])])


    class Post:
        """
        Create a new repository for the authenticated user. OAuth users must supply
        repo scope.
        """

        class Body(PostRepo):
            pass

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserStarredInput:
    class Get:
        """
        List repositories being starred by the authenticated user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            direction = fields.String(description="Ignored without 'sort' parameter.")
            sort = fields.String(description='', missing=lambda: 'created', validate=[OneOf(choices=['created', 'updated'], labels=[])])




class UserStarredOwnerRepoInput:
    class Delete:
        """
        Unstar a repository
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of a repository owner.')
            repo = fields.String(required=True, description='Name of a repository.')


    class Get:
        """
        Check if you are starring a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of a repository owner.')
            repo = fields.String(required=True, description='Name of a repository.')


    class Put:
        """
        Star a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of a repository owner.')
            repo = fields.String(required=True, description='Name of a repository.')




class UserSubscriptionsInput:
    class Get:
        """
        List repositories being watched by the authenticated user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UserSubscriptionsOwnerRepoInput:
    class Delete:
        """
        Stop watching a repository
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of the owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Get:
        """
        Check if you are watching a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of the owner.')
            repo = fields.String(required=True, description='Name of repository.')


    class Put:
        """
        Watch a repository.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            owner = fields.String(required=True, description='Name of the owner.')
            repo = fields.String(required=True, description='Name of repository.')




class UserTeamsInput:
    class Get:
        """
        List all of the teams across all of the organizations to which the authenticated user belongs. This method requires user or repo scope when authenticating via OAuth.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')




class UsersInput:
    class Get:
        """
        Get all users.
        This provides a dump of every user, in the order that they signed up for GitHub.
        Note: Pagination is powered exclusively by the since parameter. Use the Link
        header to get the URL for the next page of users.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Query(Schema):
            since = fields.Integer(description="The integer ID of the last User that you've seen.")




class UsersUsernameInput:
    class Get:
        """
        Get a single user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameEventsInput:
    class Get:
        """
        If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameEventsOrgsOrgInput:
    class Get:
        """
        This is the user's organization dashboard. You must be authenticated as the user to view this.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')
            org = fields.String(required=True)




class UsersUsernameFollowersInput:
    class Get:
        """
        List a user's followers
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameFollowingTargetUserInput:
    class Get:
        """
        Check if one user follows another.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')
            targetUser = fields.String(required=True, description='Name of user.')




class UsersUsernameGistsInput:
    class Get:
        """
        List a users gists.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')

        class Query(Schema):
            since = fields.String(description='The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\nExample: "2012-10-09T23:39:01Z".\n')




class UsersUsernameKeysInput:
    class Get:
        """
        List public keys for a user.
        Lists the verified public keys for a user. This is accessible by anyone.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameOrgsInput:
    class Get:
        """
        List all public organizations for a user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameReceivedEventsInput:
    class Get:
        """
        These are events that you'll only see public events.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameReceivedEventsPublicInput:
    class Get:
        """
        List public events that a user has received
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameReposInput:
    class Get:
        """
        List public repositories for the specified user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')

        class Query(Schema):
            type = fields.String(missing=lambda: 'all', validate=[OneOf(choices=['all', 'public', 'private', 'forks', 'sources', 'member'], labels=[])])




class UsersUsernameStarredInput:
    class Get:
        """
        List repositories being starred by a user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class UsersUsernameSubscriptionsInput:
    class Get:
        """
        List repositories being watched by a user.
        """

        class Header(Schema):
            X_GitHub_Media_Type = fields.String(data_key='X-GitHub-Media-Type', description='You can check the current version of media type in responses.\n')
            Accept = fields.String(description='Is used to set specified media type.')
            X_RateLimit_Limit = fields.Integer(data_key='X-RateLimit-Limit')
            X_RateLimit_Remaining = fields.Integer(data_key='X-RateLimit-Remaining')
            X_RateLimit_Reset = fields.Integer(data_key='X-RateLimit-Reset')
            X_GitHub_Request_Id = fields.Integer(data_key='X-GitHub-Request-Id')

        class Path(Schema):
            username = fields.String(required=True, description='Name of user.')




class EmojisOutput:
    class Get200(Emojis):
        """OK"""
        pass



class EventsOutput:
    class Get200(Events):
        """OK"""
        pass



class FeedsOutput:
    class Get200(Feeds):
        """OK"""
        pass



class GistsOutput:
    class Get200(GistsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Gist):
        """Created"""
        pass



class GistsPublicOutput:
    class Get200(GistsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class GistsStarredOutput:
    class Get200(GistsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class GistsIdOutput:
    class Get200(Gist):
        """OK"""
        pass

    class Patch200(Gist):
        """OK"""
        pass



class GistsIdCommentsOutput:
    class Get200(CommentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Comment):
        """Created"""
        pass



class GistsIdCommentsCommentIdOutput:
    class Get200(Comment):
        """OK"""
        pass

    class Patch200(Comment):
        """OK"""
        pass



class GitignoreTemplatesOutput:
    class Get200(GitignoreItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class GitignoreTemplatesLanguageOutput:
    class Get200(Gitignore_lang):
        """OK"""
        pass



class IssuesOutput:
    class Get200(IssuesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class LegacyIssuesSearchOwnerRepositoryStateKeywordOutput:
    class Get200(Search_issues_by_keyword):
        """OK"""
        pass



class LegacyReposSearchKeywordOutput:
    class Get200(Search_repositories_by_keyword):
        """OK"""
        pass



class LegacyUserEmailEmailOutput:
    class Get200(Search_user_by_email):
        """OK"""
        pass



class LegacyUserSearchKeywordOutput:
    class Get200(Search_users_by_keyword):
        """OK"""
        pass



class MetaOutput:
    class Get200(Meta):
        """OK"""
        pass



class NetworksOwnerRepoEventsOutput:
    class Get200(Events):
        """OK"""
        pass



class NotificationsOutput:
    class Get200(Notifications):
        """OK"""
        pass



class NotificationsThreadsIdOutput:
    class Get200(Notifications):
        """OK"""
        pass



class NotificationsThreadsIdSubscriptionOutput:
    class Get200(Subscription):
        """OK"""
        pass

    class Put200(Subscription):
        """OK"""
        pass



class OrgsOrgOutput:
    class Get200(Organization):
        """OK"""
        pass

    class Patch200(Organization):
        """OK"""
        pass



class OrgsOrgEventsOutput:
    class Get200(Events):
        """OK"""
        pass



class OrgsOrgIssuesOutput:
    class Get200(IssuesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class OrgsOrgMembersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class OrgsOrgPublicMembersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class OrgsOrgReposOutput:
    class Get200(ReposItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(ReposItem):
        """Created"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class OrgsOrgTeamsOutput:
    class Get200(TeamsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Team):
        """Created"""
        pass



class RateLimitOutput:
    class Get200(Rate_limit):
        """OK"""
        pass



class ReposOwnerRepoOutput:
    class Get200(Repo):
        """OK"""
        pass

    class Patch200(Repo):
        """OK"""
        pass



class ReposOwnerRepoAssigneesOutput:
    class Get200(AssigneesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoBranchesOutput:
    class Get200(BranchesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoBranchesBranchOutput:
    class Get200(Branch):
        """OK"""
        pass



class ReposOwnerRepoCollaboratorsOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoCommentsOutput:
    class Get200(RepoCommentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoCommentsCommentIdOutput:
    class Get200(CommitComments):
        """OK"""
        pass

    class Patch200(CommitComments):
        """OK"""
        pass



class ReposOwnerRepoCommitsOutput:
    class Get200(CommitsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoCommitsRefStatusOutput:
    class Get200(RefStatusItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoCommitsShaCodeOutput:
    class Get200(Commit):
        """OK"""
        pass



class ReposOwnerRepoCommitsShaCodeCommentsOutput:
    class Get200(RepoCommentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(CommitComments):
        """Created"""
        pass



class ReposOwnerRepoCompareBaseIdheadIdOutput:
    class Get200(Compare_commits):
        """OK"""
        pass



class ReposOwnerRepoContentsPathOutput:
    class Delete200(DeleteFile):
        """OK"""
        pass

    class Get200(Contents_path):
        """OK"""
        pass

    class Put200(CreateFile):
        """OK"""
        pass



class ReposOwnerRepoContributorsOutput:
    class Get200(ContributorsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoDeploymentsOutput:
    class Get200(Repo_deploymentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Deployment_resp):
        """Created"""
        pass



class ReposOwnerRepoDeploymentsIdStatusesOutput:
    class Get200(Deployment_statusesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoDownloadsOutput:
    class Get200(Downloads):
        """OK"""
        pass



class ReposOwnerRepoDownloadsDownloadIdOutput:
    class Get200(Downloads):
        """OK"""
        pass



class ReposOwnerRepoEventsOutput:
    class Get200(Events):
        """OK"""
        pass



class ReposOwnerRepoForksOutput:
    class Get200(ForksItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Fork):
        """Created"""
        pass



class ReposOwnerRepoGitBlobsOutput:
    class Post201(Blobs):
        """Created"""
        pass



class ReposOwnerRepoGitBlobsShaCodeOutput:
    class Get200(Blob):
        """OK"""
        pass



class ReposOwnerRepoGitCommitsOutput:
    class Post201(GitCommit):
        """Created"""
        pass



class ReposOwnerRepoGitCommitsShaCodeOutput:
    class Get200(RepoCommit):
        """OK"""
        pass



class ReposOwnerRepoGitRefsOutput:
    class Get200(RefsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(HeadBranch):
        """Created"""
        pass



class ReposOwnerRepoGitRefsRefOutput:
    class Get200(HeadBranch):
        """OK"""
        pass

    class Patch200(HeadBranch):
        """OK"""
        pass



class ReposOwnerRepoGitTagsOutput:
    class Post201(Tags):
        """Created"""
        pass



class ReposOwnerRepoGitTagsShaCodeOutput:
    class Get200(Tag):
        """OK"""
        pass



class ReposOwnerRepoGitTreesOutput:
    class Post201(Trees):
        """Created"""
        pass



class ReposOwnerRepoGitTreesShaCodeOutput:
    class Get200(Tree):
        """OK"""
        pass



class ReposOwnerRepoHooksOutput:
    class Get200(HookItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(HookItem):
        """Created"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoHooksHookIdOutput:
    class Get200(HookItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Patch200(HookItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoIssuesOutput:
    class Get200(IssuesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Issue):
        """Created"""
        pass



class ReposOwnerRepoIssuesCommentsOutput:
    class Get200(IssuesCommentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoIssuesCommentsCommentIdOutput:
    class Get200(IssuesComment):
        """OK"""
        pass

    class Patch200(IssuesComment):
        """OK"""
        pass



class ReposOwnerRepoIssuesEventsOutput:
    class Get200(Events):
        """OK"""
        pass



class ReposOwnerRepoIssuesEventsEventIdOutput:
    class Get200(Event):
        """OK"""
        pass



class ReposOwnerRepoIssuesNumberOutput:
    class Get200(Issue):
        """OK"""
        pass

    class Patch200(Issue):
        """OK"""
        pass



class ReposOwnerRepoIssuesNumberCommentsOutput:
    class Get200(IssuesCommentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(IssuesComment):
        """Created"""
        pass



class ReposOwnerRepoIssuesNumberEventsOutput:
    class Get200(Events):
        """OK"""
        pass



class ReposOwnerRepoIssuesNumberLabelsOutput:
    class Get200(LabelsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Label):
        """Created"""
        pass

    class Put201(Label):
        """Created"""
        pass



class ReposOwnerRepoKeysOutput:
    class Get200(KeysItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(User_keys_keyId):
        """Created"""
        pass



class ReposOwnerRepoKeysKeyIdOutput:
    class Get200(User_keys_keyId):
        """OK"""
        pass



class ReposOwnerRepoLabelsOutput:
    class Get200(LabelsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Label):
        """Created"""
        pass



class ReposOwnerRepoLabelsNameOutput:
    class Get200(Label):
        """OK"""
        pass

    class Patch200(Label):
        """OK"""
        pass



class ReposOwnerRepoLanguagesOutput:
    class Get200(Languages):
        """OK"""
        pass



class ReposOwnerRepoMergesOutput:
    class Post201(MergesSuccessful):
        """Successful Response (The resulting merge commit)"""
        pass

    class Post404(MergesConflict):
        """Missing base response or missing head response"""
        pass

    class Post409(MergesConflict):
        """Merge conflict response."""
        pass



class ReposOwnerRepoMilestonesOutput:
    class Get200(Milestone):
        """OK"""
        pass

    class Post201(Milestone):
        """Created"""
        pass



class ReposOwnerRepoMilestonesNumberOutput:
    class Get200(Milestone):
        """OK"""
        pass

    class Patch200(Milestone):
        """OK"""
        pass



class ReposOwnerRepoMilestonesNumberLabelsOutput:
    class Get200(LabelsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoNotificationsOutput:
    class Get200(Notifications):
        """OK"""
        pass



class ReposOwnerRepoPullsOutput:
    class Get200(PullsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(PullsItem):
        """Created"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoPullsCommentsOutput:
    class Get200(IssuesCommentsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoPullsCommentsCommentIdOutput:
    class Get200(PullsComment):
        """OK"""
        pass

    class Patch200(PullsComment):
        """OK"""
        pass



class ReposOwnerRepoPullsNumberOutput:
    class Get200(PullRequest):
        """OK"""
        pass

    class Patch200(Repo):
        """OK"""
        pass



class ReposOwnerRepoPullsNumberCommentsOutput:
    class Get200(PullsComment):
        """OK"""
        pass

    class Post201(PullsComment):
        """Created"""
        pass



class ReposOwnerRepoPullsNumberCommitsOutput:
    class Get200(CommitsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoPullsNumberFilesOutput:
    class Get200(PullsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoPullsNumberMergeOutput:
    class Put200(Merge):
        """Response if merge was successful."""
        pass

    class Put405(Merge):
        """Response if merge cannot be performed."""
        pass



class ReposOwnerRepoReadmeOutput:
    class Get200(Contents_path):
        """OK"""
        pass



class ReposOwnerRepoReleasesOutput:
    class Get200(ReleasesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(Release):
        """Created"""
        pass



class ReposOwnerRepoReleasesAssetsIdOutput:
    class Get200(Asset):
        """OK"""
        pass

    class Patch200(Asset):
        """OK"""
        pass



class ReposOwnerRepoReleasesIdOutput:
    class Get200(Release):
        """OK"""
        pass

    class Patch200(Release):
        """OK"""
        pass



class ReposOwnerRepoReleasesIdAssetsOutput:
    class Get200(AssetsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoStargazersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoStatsCodeFrequencyOutput:
    class Get200(PrimitiveValueSchema):
        class schema_class(Schema):
            value = fields.List(fields.Integer())




class ReposOwnerRepoStatsCommitActivityOutput:
    class Get200(CommitActivityStatsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoStatsContributorsOutput:
    class Get200(ContributorsStatsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoStatsParticipationOutput:
    class Get200(ParticipationStats):
        """OK"""
        pass



class ReposOwnerRepoStatsPunchCardOutput:
    class Get200(PrimitiveValueSchema):
        class schema_class(Schema):
            value = fields.List(fields.Integer())




class ReposOwnerRepoStatusesRefOutput:
    class Get200(RefItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(RefItem):
        """Created"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoSubscribersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoSubscriptionOutput:
    class Get200(Subscribition):
        """OK"""
        pass

    class Put200(Subscribition):
        """OK"""
        pass



class ReposOwnerRepoTagsOutput:
    class Get200(Tags):
        """OK"""
        pass



class ReposOwnerRepoTeamsOutput:
    class Get200(TeamsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class ReposOwnerRepoWatchersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class RepositoriesOutput:
    class Get200(RepositoriesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class SearchCodeOutput:
    class Get200(Search_code):
        """OK"""
        pass



class SearchIssuesOutput:
    class Get200(Search_issues):
        """OK"""
        pass



class SearchRepositoriesOutput:
    class Get200(Search_repositories):
        """OK"""
        pass



class SearchUsersOutput:
    class Get200(Search_users):
        """OK"""
        pass



class TeamsTeamIdOutput:
    class Get200(Team):
        """OK"""
        pass

    class Patch200(Team):
        """OK"""
        pass



class TeamsTeamIdMembersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class TeamsTeamIdMembersUsernameOutput:
    class Put422(OrganizationAsTeamMember):
        """If you attempt to add an organization to a team, you will get this."""
        pass



class TeamsTeamIdMembershipsUsernameOutput:
    class Get200(TeamMembership):
        """User is a member."""
        pass

    class Put200(TeamMembership):
        """Team member added."""
        pass

    class Put422(OrganizationAsTeamMember):
        """If you attempt to add an organization to a team, you will get this."""
        pass



class TeamsTeamIdReposOutput:
    class Get200(TeamReposItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserOutput:
    class Get200(User):
        """OK"""
        pass

    class Patch200(User):
        """OK"""
        pass



class UserEmailsOutput:
    class Get200(PrimitiveValueSchema):
        class schema_class(Schema):
            value = fields.List(fields.String())




class UserFollowersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserFollowingOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserIssuesOutput:
    class Get200(IssuesItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserKeysOutput:
    class Get200(GitignoreItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(User_keys_keyId):
        """Created"""
        pass



class UserKeysKeyIdOutput:
    class Get200(User_keys_keyId):
        """OK"""
        pass



class UserOrgsOutput:
    class Get200(GitignoreItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserReposOutput:
    class Get200(ReposItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)


    class Post201(ReposItem):
        """Created"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserStarredOutput:
    class Get200(GitignoreItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserSubscriptionsOutput:
    class Get200(User_userId_subscribitionsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UserTeamsOutput:
    class Get200(Teams_listItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersUsernameOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersUsernameFollowersOutput:
    class Get200(UsersItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersUsernameGistsOutput:
    class Get200(GistsItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersUsernameKeysOutput:
    class Get200(GitignoreItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersUsernameOrgsOutput:
    class Get200(GitignoreItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)




class UsersUsernameReposOutput:
    class Get200(ReposItem):
        """OK"""
        def __init__(self, *args, **kwargs):
            kwargs['many'] = True
            super().__init__(*args, **kwargs)
